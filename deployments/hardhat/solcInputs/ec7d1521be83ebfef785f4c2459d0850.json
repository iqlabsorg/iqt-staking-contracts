{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/timelock/BatchTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ITerminateable.sol\";\nimport \"./IBatchTimelock.sol\";\nimport \"./IVestingPool.sol\";\n\ncontract BatchTimelock is Ownable, ITerminateable, IBatchTimelock, IVestingPool {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Token that will be vested (IQT).\n     * @dev Link to IQT repository: https://github.com/iqlabsorg/iqt-eth\n     */\n    IERC20 internal _token;\n\n    /**\n     * @notice Address of the vesting pool.\n     */\n    address internal _vestingPool;\n\n    /**\n     * @notice Array of all receiver addresses.\n     */\n    EnumerableSet.AddressSet internal _allReceivers;\n\n    /**\n     * @notice Mapping of all timelocks.\n     */\n    mapping(address => Timelock) internal _timelocks;\n\n    /**\n     * @notice Checks if the timelock exists\n     */\n    modifier onlyReceiver() {\n        if (_timelocks[_msgSender()].receiver != _msgSender()) {\n            revert InvalidReceiverAddress();\n        }\n        _;\n    }\n\n    /**\n     * @notice Reverts if the timelock does not exist.\n    */\n    constructor(IERC20 token, address vestingPool) {\n        _token = token;\n        _vestingPool = vestingPool;\n    }\n\n    /**\n     * @inheritdoc ITerminateable\n     */\n    function terminate(address receiver, uint256 terminationFrom) external onlyOwner {\n        Timelock storage lock = _timelocks[receiver];\n\n        if (lock.timelockFrom >= terminationFrom) {\n            revert TerminationTimeMustBeAfterLockStart(terminationFrom, lock.timelockFrom);\n        }\n\n        lock.terminationFrom = terminationFrom;\n        lock.isTerminated = true;\n\n        emit TimelockTerminated(receiver, terminationFrom);\n    }\n\n    /**\n     * @inheritdoc ITerminateable\n     */\n    function determinate(address receiver) external onlyOwner {\n        Timelock storage lock = _timelocks[receiver];\n        lock.isTerminated = false;\n        lock.terminationFrom = 0;\n\n        emit TimelockDeterminated(receiver);\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function addTimelockBatch(Receiver[] memory receivers) external onlyOwner {\n        if (receivers.length == 0) {\n            revert EmptyReceiversArray();\n        }\n\n        for (uint256 i = 0; i < receivers.length; i++) {\n            _addTimelock(\n                receivers[i].receiver,\n                receivers[i].totalAmount,\n                receivers[i].timelockFrom,\n                receivers[i].cliffDuration,\n                receivers[i].vestingDuration\n            );\n        }\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) external onlyOwner {\n      _addTimelock(receiver, totalAmount, timelockFrom, cliffDuration, vestingDuration);\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n     */\n    function claim(uint256 amount) external onlyReceiver {\n        if (amount == 0) {\n            revert ZeroClaimAmount();\n        }\n\n        Timelock storage lock = _timelocks[msg.sender];\n\n        if (lock.isTerminated && block.timestamp >= lock.terminationFrom) {\n            revert TimelockIsTerminated(msg.sender, lock.terminationFrom);\n        }\n\n        uint256 withdrawable = getClaimableBalance(msg.sender);\n\n        if (amount > withdrawable) {\n            revert AmountExceedsWithdrawableAllowance(amount, withdrawable);\n        }\n\n        lock.releasedAmount += amount;\n\n        if (!_token.transferFrom(_vestingPool, msg.sender, amount)) {\n            revert TokenTransferFailed(_vestingPool, msg.sender, amount);\n        }\n\n        emit TokensClaimed(msg.sender, amount);\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n     */\n    function getClaimableBalance(address receiver) public view returns (uint256) {\n        uint256 blockTimestampNow = block.timestamp;\n        Timelock storage lock = _timelocks[receiver];\n        uint256 lockFromPlusCliff = lock.timelockFrom + lock.cliffDuration;\n\n        if (lock.isTerminated && blockTimestampNow >= lock.terminationFrom) {\n            return 0;\n        }\n\n        if (blockTimestampNow < lockFromPlusCliff) {\n            return 0;\n        }\n\n        if (blockTimestampNow >= lockFromPlusCliff + lock.vestingDuration) {\n            return lock.totalAmount - lock.releasedAmount;\n        }\n\n        uint256 timeIntoVesting = blockTimestampNow - lockFromPlusCliff;\n        uint256 vestedPortion = (lock.totalAmount * timeIntoVesting) / lock.vestingDuration;\n\n        return vestedPortion - lock.releasedAmount;\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function getTimelock(address receiver) public view returns (Timelock memory) {\n        return _timelocks[receiver];\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n   function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory) {\n        uint256 receiverCount = _allReceivers.length();\n        if (offset >= receiverCount) {\n            return new address[](0);\n        }\n\n        if (offset + limit > receiverCount) {\n            limit = receiverCount - offset;\n        }\n\n        address[] memory receivers = new address[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            receivers[i] = _allReceivers.at(offset + i);\n        }\n\n        return receivers;\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function getTimelockReceiversAmount() external view returns (uint256) {\n        return _allReceivers.length();\n   }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getCurrentAllowance() public view returns (uint256) {\n        return _token.allowance(_vestingPool, address(this));\n    }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getTotalTokensLocked() public view returns (uint256) {\n        uint256 total = 0;\n        for (uint256 i = 0; i < _allReceivers.length(); i++) {\n            total += _timelocks[_allReceivers.at(i)].totalAmount;\n        }\n        return total;\n    }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getVestingPoolAddress() public view returns (address) {\n        return _vestingPool;\n    }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getTokenAddress() public view returns (address) {\n        return address(_token);\n    }\n\n    /**\n     * @notice Creates new timelock for the receiver.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param timelockFrom Timestamp from which the timelock will start.\n     * @param cliffDuration Cliff time in seconds (6 months default).\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\n    */\n    function _addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) internal onlyOwner {\n        if (receiver == address(0)) revert InvalidReceiverAddress();\n        if (totalAmount == 0) revert InvalidTimelockAmount();\n        if (_allReceivers.contains(receiver)) revert ReceiverAlreadyHasATimelock(receiver);\n\n        _timelocks[receiver] = Timelock({\n            receiver: receiver,\n            totalAmount: totalAmount,\n            releasedAmount: 0,\n            timelockFrom: timelockFrom,\n            cliffDuration: cliffDuration,\n            vestingDuration: vestingDuration,\n            isTerminated: false,\n            terminationFrom: 0\n        });\n        _allReceivers.add(receiver);\n\n        emit TimelockCreated(receiver, totalAmount, timelockFrom, cliffDuration, vestingDuration);\n    }\n}"
    },
    "contracts/timelock/IBatchTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IBatchTimelock {\n    /**\n     * @notice Reverts if amount exceeds vesting allowance.\n     * @param amount Amount of tokens to be claimed.\n     * @param claimable Amount of tokens that can be claimed.\n     */\n    error AmountExceedsWithdrawableAllowance(uint256 amount, uint256 claimable);\n\n    /**\n     * @notice Reverts if cliff period has not ended.\n     */\n    error CliffPeriodNotEnded(uint256 timeNow, uint256 cliffEndsAt);\n\n    /**\n     * @notice Reverts if vesting period has not started.\n     */\n    error ZeroAllocation();\n\n    /**\n     * @notice Reverts if empty receivers array is passed.\n     */\n    error EmptyReceiversArray();\n\n    /**\n     * @notice Reverts if invalid receiver address is passed.\n     */\n    error InvalidReceiverAddress();\n\n    /**\n     * @notice Reverts if invalid timelock amount is passed.\n     */\n    error InvalidTimelockAmount();\n\n    /**\n     * @notice Reverts if receiver already has a timelock.\n     * @param receiver Address of the receiver.\n     */\n    error ReceiverAlreadyHasATimelock(address receiver);\n\n    /**\n     * @notice Reverts if zero claim amount is passed.\n    */\n    error ZeroClaimAmount();\n\n    /**\n     * @notice Reverts if token transfer failed.\n     * @param tokenPool Address of the token pool.\n     * @param receiver Address of the receiver.\n     * @param amount Amount of tokens transferred.\n    */\n    error TokenTransferFailed(address tokenPool, address receiver, uint256 amount);\n\n    /**\n     * @notice Token receiver struct that is used for adding _timelocks for timelock.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param timelockFrom Timestamp from which the timelock will start.\n     * @param cliffDuration Cliff time in months (6 months default).\n     * @param vestingDuration Vesting duration in months (18/24 months).\n     */\n    struct Receiver {\n        address receiver;\n        uint256 totalAmount;\n        uint256 timelockFrom;\n        uint256 cliffDuration;\n        uint256 vestingDuration;\n    }\n\n    /**\n     * @notice Timelock struct that is used for vesting.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param releasedAmount Amount of tokens released.\n     * @param lockFrom Timestamp from which tokens will start to vest.\n     * @param cliffDuration Cliff time in months (6 months default).\n     * @param vestingDuration Vesting duration in months (18/24 months).\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     * @param isTerminated Flag that indicates if timelock is terminated.\n     */\n    struct Timelock {\n        address receiver;\n        uint256 totalAmount;\n        uint256 releasedAmount;\n        uint256 timelockFrom;\n        uint256 cliffDuration;\n        uint256 vestingDuration;\n        uint256 terminationFrom;\n        bool isTerminated;\n    }\n\n    /**\n     * @notice Emits when timelock is created.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param cliffDuration Cliff time in seconds (6 months default).\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\n     */\n    event TimelockCreated(address indexed receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration);\n\n    /**\n     * @notice Emits when tokens are claimed.\n     * @param receiver Address of the claimer.\n     * @param amount Amount of tokens claimed.\n     */\n    event TokensClaimed(address indexed receiver, uint256 amount);\n\n    /**\n     * @notice Creates timelock for token receivers in a batch mode.\n     * @param receivers Array of receivers.\n     */\n    function addTimelockBatch(Receiver[] memory receivers) external;\n\n    /**\n     * @notice Creates timelock for token receiver.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param timelockFrom Timestamp from which the timelock will start.\n     * @param cliffDuration Cliff time in seconds (6 months default).\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\n    */\n    function addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) external;\n\n    /**\n     * @notice Claims tokens for the receiver.\n     * @param amount Amount of tokens to be claimed.\n     */\n    function claim(uint256 amount) external;\n\n    /**\n     * @notice Returns the timelock data.\n     * @param receiver Address of the receiver.\n     */\n    function getTimelock(address receiver) external view returns (Timelock memory);\n\n    /**\n     * @notice Returns the amount of tokens that are currently allowed for claim.\n     * @param receiver Address of the receiver.\n     */\n    function getClaimableBalance(address receiver) external view returns (uint256);\n\n    /**\n     * @notice Returns the array of timelock receivers.\n     * @param offset Offset from which receivers will be returned.\n     * @param limit Limit of receivers to be returned.\n     */\n    function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the amount of timelock receivers.\n     */\n    function getTimelockReceiversAmount() external view returns (uint256);\n}"
    },
    "contracts/timelock/ITerminateable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ITerminateable {\n    /**\n     * @notice Reverts if termination time is before lock start.\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     * @param lockFrom Timestamp from which tokens will be locked.\n    */\n    error TerminationTimeMustBeAfterLockStart(uint256 terminationFrom, uint256 lockFrom);\n\n    /**\n     * @notice Reverts if timelock is terminated\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n    */\n    error TimelockIsTerminated(address receiver, uint256 terminationFrom);\n\n    /**\n     * @notice Emits when timelock is terminated.\n     * @param receiver Address of the receiver.\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     */\n    event TimelockTerminated(address indexed receiver, uint256 terminationFrom);\n\n    /**\n     * @notice Emits when timelock is determinated.\n     * @param receiver Address of the receiver.\n     */\n    event TimelockDeterminated(address indexed receiver);\n\n    /**\n     * @notice Terminates timelock for the receiver.\n     * @param receiver Address of the receiver.\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     */\n    function terminate(address receiver, uint256 terminationFrom) external;\n\n    /**\n     * @notice Determinates timelock for the receiver.\n     * @param receiver Address of the receiver.\n     */\n    function determinate(address receiver) external;\n}"
    },
    "contracts/timelock/IVestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IVestingPool {\n    /**\n     * @notice Returns the amount of tokens that are currently allowed for transfer.\n     */\n    function getCurrentAllowance() external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of tokens that are currently locked.\n     */\n    function getTotalTokensLocked() external view returns (uint256);\n\n    /**\n     * @notice Returns the address of vesting pool.\n     */\n    function getVestingPoolAddress() external view returns (address);\n\n    /**\n     * @notice Returns the address of token.\n     */\n    function getTokenAddress() external view returns (address);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}