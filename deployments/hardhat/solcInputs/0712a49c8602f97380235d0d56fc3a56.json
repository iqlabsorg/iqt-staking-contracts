{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/library/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nlibrary Constants {\n    uint16 constant MAX_APY = 100_00;\n    uint256 constant SECONDS_IN_DAY = 86400;\n    uint256 constant SECONDS_IN_YEAR = 31536000;\n}\n"
    },
    "contracts/mocks/IQTMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract IQTMock is ERC20Burnable {\n    constructor(address mintTo) ERC20(\"IQ Protocol Token\", \"IQT\") {\n        _mint(mintTo, 1_000_000_000 * 10 ** decimals());\n    }\n}"
    },
    "contracts/staking-management/IStakingManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IStakingManagement {\n    /**\n     * @dev Reverts if the staking plan does not exist.\n     * @param planId Unique ID of the staking plan.\n     */\n    error StakingPlanDoesNotExist(uint256 planId);\n\n    /**\n     * @dev Reverts if the duration is not greater than zero.\n     */\n    error DurationMustBeGreaterThanZero();\n\n    /**\n     * @dev Reverts if the APY is not within range (min=1,max=10000).\n     */\n    error APYMustBeWithinRange();\n\n    /**\n     * @dev Reverts if the minimum stake is bigger or not equal to the maximum stake.\n     */\n    error MinimumStakeMustBeLessThanOrEqualToMaximumStake();\n\n    /**\n     * @dev Emitted when a staking plan is added.\n     * @param planId Staking plan ID.\n     * @param duration Stake duration (in seconds).\n     * @param apy Annual Percentage Yield.\n     */\n    event StakingPlanAdded(uint256 planId, uint256 duration, uint16 apy);\n\n    /**\n     * @dev Emitted when a staking plan is updated.\n     * @param planId Updated stake plan ID.\n     * @param duration Updated stake duration (in seconds).\n     * @param apy Updated Annual Percentage Yield.\n     */\n    event StakingPlanUpdated(uint256 planId, uint256 duration, uint16 apy);\n\n    /**\n     * @dev Emitted when a staking plan is removed.\n     * @param planId Removed staking plan ID.\n     */\n    event StakingPlanRemoved(uint256 planId);\n\n    /**\n     * @dev Staking plan data.\n     * @param duration Duration of the staking plan (in seconds).\n     * @param apy Annual Percentage Rate of the staking plan.\n     */\n    struct StakingPlan {\n        uint256 duration;\n        uint16 apy;\n    }\n\n    /**\n     * @dev Add a new staking plan.\n     * @param duration Duration of the staking plan (in seconds).\n     * @param apy Annual Percentage Rate of the staking plan.\n     * @return Unique ID of the staking plan.\n     */\n    function addStakingPlan(uint256 duration, uint16 apy) external returns (uint256);\n\n    /**\n     * @dev Update an existing staking plan.\n     * @param planId Unique ID of the staking plan.\n     * @param duration Duration of the staking plan (in seconds).\n     * @param apy Annual Percentage Rate of the staking plan.\n     */\n    function updateStakingPlan(uint256 planId, uint256 duration, uint16 apy) external;\n\n    /**\n     * @dev Remove an existing staking plan.\n     * @param planId Unique ID of the staking plan.\n     */\n    function removeStakingPlan(uint256 planId) external;\n\n    /**\n     * @dev Enable withdrawals.\n     */\n    function enableWithdraw() external;\n\n    /**\n     * @dev Disable withdrawals.\n     */\n    function disableWithdraw() external;\n\n    /**\n     * @dev Set the minimum and maximum stake.\n     * @param minimumStake Minimum stake.\n     * @param maximumStake Maximum stake.\n     */\n    function setStakingLimits(uint256 minimumStake, uint256 maximumStake) external;\n\n    /**\n     * @dev Set the minimum stake.\n     * @param minimumStake Minimum stake.\n     */\n    function setMininumStake(uint256 minimumStake) external;\n\n    /**\n     * @dev Set the maximum stake.\n     * @param maximumStake Maximum stake.\n     */\n    function setMaximumStake(uint256 maximumStake) external;\n\n    /**\n     * @dev Reverts if the staking plan does not exist.\n     * @param planId Unique ID of the staking plan.\n     */\n    function checkStakingPlanExists(uint256 planId) external view;\n\n    /**\n     * @dev Get staking token\n     * @return Address of the staking token.\n     */\n    function getStakingToken() external view returns (address);\n\n    /**\n     * @dev Get a staking plan.\n     * @param planId Unique ID of the staking plan.\n     * @return Staking plan data.\n     */\n    function getStakingPlan(uint256 planId) external view returns (StakingPlan memory);\n\n    /**\n     * @dev Get all staking plans.\n     * @param offset Offset of the staking plans.\n     * @return Array of staking plans.\n     */\n    function getStakingPlans(uint256 offset, uint256 limit) external view returns (StakingPlan[] memory);\n\n    /**\n     * @dev Check if withdrawals are enabled.\n     */\n    function isWithdrawEnabled() external view returns (bool);\n\n    /**\n     * @dev Get the minimum and maximum stake.\n     * @return minimumStake Minimum stake.\n     * @return maximumStake Maximum stake.\n     */\n    function getStakingLimits() external view returns (uint256 minimumStake, uint256 maximumStake);\n\n    /**\n     * @dev Get the minimum stake.\n     * @return minimumStake Minimum stake.\n     */\n    function getMinimumStake() external view returns (uint256);\n\n    /**\n     * @dev Get the maximum stake.\n     * @return maximumStake Maximum stake.\n     */\n    function getMaximumStake() external view returns (uint256);\n}\n"
    },
    "contracts/staking-management/StakingManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IStakingManagement} from \"./IStakingManagement.sol\";\nimport {Constants} from \"../library/Constants.sol\";\n\ncontract StakingManagement is IStakingManagement, Ownable {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * @dev Staking token (IQT).\n     */\n    IERC20 internal stakingToken;\n\n    /**\n     * @dev Staking plans.\n     */\n    mapping(uint256 => StakingPlan) internal _stakingPlans;\n\n    /**\n     * @dev Staking plan IDs.\n     */\n    EnumerableSet.UintSet private _stakingPlanIds;\n\n    /**\n     * @dev Whether or not withdrawals are enabled.\n     */\n    bool internal _withdrawalEnabled;\n\n    /**\n     * @dev Minimum stake.\n     */\n    uint256 internal _minimumStake;\n\n    /**\n     * @dev Maximum stake.\n     */\n    uint256 internal _maximumStake;\n\n    /**\n     * @dev Constructor.\n     * @param _stakingToken Staking token (IQT).\n     */\n    constructor(address _stakingToken) {\n        stakingToken = IERC20(_stakingToken);\n        _withdrawalEnabled = false;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function addStakingPlan(uint256 duration, uint16 apy) external override onlyOwner returns (uint256) {\n        if (duration == 0) revert DurationMustBeGreaterThanZero();\n        if (apy == 0 && apy > Constants.MAX_APY) revert APYMustBeWithinRange();\n\n        uint256 planId = _stakingPlanIds.length();\n        _stakingPlans[planId] = StakingPlan({duration: duration, apy: apy});\n        _stakingPlanIds.add(planId);\n\n        return planId;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function updateStakingPlan(uint256 planId, uint256 duration, uint16 apy) external override onlyOwner {\n        _checkStakingPlanExists(planId);\n\n        if (duration == 0) revert DurationMustBeGreaterThanZero();\n        if (apy == 0 && apy > Constants.MAX_APY) revert APYMustBeWithinRange();\n\n        _stakingPlans[planId] = StakingPlan({duration: duration, apy: apy});\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function removeStakingPlan(uint256 planId) external override onlyOwner {\n        _checkStakingPlanExists(planId);\n        _stakingPlanIds.remove(planId);\n        delete _stakingPlans[planId];\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function enableWithdraw() external override onlyOwner {\n        _withdrawalEnabled = true;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function disableWithdraw() external override onlyOwner {\n        _withdrawalEnabled = false;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function setStakingLimits(uint256 minimumStake, uint256 maximumStake) external override onlyOwner {\n        if (minimumStake > maximumStake) revert MinimumStakeMustBeLessThanOrEqualToMaximumStake();\n        _minimumStake = minimumStake;\n        _maximumStake = maximumStake;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function setMininumStake(uint256 minimumStake) external override onlyOwner {\n        if (minimumStake > _maximumStake) revert MinimumStakeMustBeLessThanOrEqualToMaximumStake();\n        _minimumStake = minimumStake;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function setMaximumStake(uint256 maximumStake) external override onlyOwner {\n        if (_minimumStake > maximumStake) revert MinimumStakeMustBeLessThanOrEqualToMaximumStake();\n        _maximumStake = maximumStake;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function checkStakingPlanExists(uint256 planId) external view override {\n        _checkStakingPlanExists(planId);\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function getStakingToken() external view override returns (address) {\n        return address(stakingToken);\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function getStakingPlan(uint256 planId) external view override returns (StakingPlan memory) {\n        _checkStakingPlanExists(planId);\n        return _stakingPlans[planId];\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function getStakingPlans(uint256 offset, uint256 limit) external view override returns (StakingPlan[] memory) {\n        uint256 planCount = _stakingPlanIds.length();\n        if (offset >= planCount) {\n            return new StakingPlan[](0);\n        }\n\n        if (offset + limit > planCount) {\n            limit = planCount - offset;\n        }\n\n        StakingPlan[] memory plans = new StakingPlan[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            uint256 planId = _stakingPlanIds.at(offset + i);\n            plans[i] = _stakingPlans[planId];\n        }\n\n        return plans;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function isWithdrawEnabled() external view override returns (bool) {\n        return _withdrawalEnabled;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function getStakingLimits() external view override returns (uint256 minimumStake, uint256 maximumStake) {\n        return (_minimumStake, _maximumStake);\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function getMinimumStake() external view override returns (uint256) {\n        return _minimumStake;\n    }\n\n    /**\n     * @inheritdoc IStakingManagement\n     */\n    function getMaximumStake() external view override returns (uint256) {\n        return _maximumStake;\n    }\n\n    /**\n     * @dev Reverts if the staking plan does not exist.\n     * @param planId Unique ID of the staking plan.\n     */\n    function _checkStakingPlanExists(uint256 planId) internal view {\n        if (!_stakingPlanIds.contains(planId)) revert StakingPlanDoesNotExist(planId);\n    }\n}\n"
    },
    "contracts/staking/IStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IStaking {\n    /**\n     * @dev Reverts if `caller` is not a stake owner.\n     * @param stakeId Unique stake ID.\n     */\n    error CallerIsNotStakeOwner(uint256 stakeId);\n\n    /**\n     * @dev Reverts if the withdrawal is not enabled.\n     */\n    error EarlyWithdrawalNotAllowed(uint256 currentTimestamp, uint256 endTimestamp);\n\n    /**\n     * @dev Reverts if the stake does not exist.\n     * @param stakeId Unique stake ID.\n     */\n    error StakeDoesNotExist(uint256 stakeId);\n\n    /**\n     * @dev Reverts if the stake has already been withdrawn.\n     * @param stakeId Unique stake ID.\n     */\n    error StakeAlreadyWithdrawn(uint256 stakeId);\n\n    /**\n     * @dev Reverts if the stake has not yet ended.\n     * @param stakeId Unique stake ID.\n     */\n    error StakeNotYetEnded(uint256 stakeId);\n\n    /**\n     * @dev Emitted when a stake is added.\n     * @param staker Address of the staker.\n     * @param stakeId Unique ID of the stake.\n     */\n    event StakeAdded(address indexed staker, uint256 indexed stakeId);\n\n    /**\n     * @dev Emitted when a stake is withdrawn.\n     * @param staker Address of the staker.\n     * @param stakeId Unique ID of the stake.\n     */\n    event StakeWithdrawn(address indexed staker, uint256 indexed stakeId);\n\n    /**\n     * @dev Stake data.\n     * @param amount Amount of tokens staked.\n     * @param stakingPlanId Index of the staking plan.\n     * @param startTimestamp Timestamp when the stake was created.\n     * @param endTimestamp Timestamp when the stake will end.\n     * @param earningsInTokens Amount of tokens earned (calculated after withdraw).\n     * @param earningsPercentage Percentage of tokens earned (calculated after withdraw).\n     * @param earlyWithdrawal Whether the stake was withdrawn before the end.\n     * @param withdrawn Whether the stake has been withdrawn.\n     */\n    struct Stake {\n        address staker;\n        uint256 amount;\n        uint256 stakingPlanId;\n        uint256 startTimestamp;\n        uint256 endTimestamp;\n        uint256 earningsInTokens;\n        uint256 earningsPercentage;\n        bool earlyWithdrawal;\n        bool withdrawn;\n    }\n\n    /**\n     * @dev Stake `amount` tokens for `stakingPlan` period.\n     * @param amount Amount of tokens to stake.\n     * @param stakingPlan Index of the staking plan to stake for.\n     * @return Unique ID of the stake.\n     */\n    function stake(uint256 amount, uint256 stakingPlan) external returns (uint256);\n\n    /**\n     * @dev Withdraw stake from the staking pool.\n     * @param stakeId Unique ID of the stake.\n     */\n    function withdraw(uint256 stakeId) external;\n\n    /**\n     * @dev Calculate the earnings in tokens and percentages.\n     * @param stakeId Unique ID of the stake.\n     * @return earningsInTokens Amount of tokens earned.\n     * @return earningsPercentage Percentage of tokens earned.\n     */\n    function calculateStakeEarnings(\n        uint256 stakeId\n    ) external view returns (uint256 earningsInTokens, uint16 earningsPercentage);\n\n    /**\n     * @dev Calculate the amount of tokens earned for a stake.\n     * @param stakeId Unique ID of the stake.\n     * @return Amount of tokens earned.\n     */\n    function getStake(uint256 stakeId) external view returns (Stake memory);\n\n    /**\n     * @dev Get all stakes data.\n     * @param staker Address of the staker.\n     * @param offset Offset of the stakes.\n     * @param limit Limit of the stakes.\n     * @return Array of stakes.\n     */\n    function getStakes(address staker, uint256 offset, uint256 limit) external view returns (Stake[] memory);\n\n    /**\n     * @dev Get all stakes data.\n     * @param staker Address of the staker.\n     * @return Array of stakes.\n     */\n    function getStakeIds(address staker) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns `true` if a stake exists.\n     * @param stakeId Unique ID of the stake.\n     */\n    function isStakeExists(uint256 stakeId) external view returns (bool);\n\n    /**\n     * @dev Calculate the total earnings in tokens and percentages.\n     */\n    function calculateTotalEarnings(\n        address staker\n    ) external view returns (uint256 totalEarningsInTokens, uint16 totalEarningsPercentage);\n}\n"
    },
    "contracts/staking/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport {IStakingManagement} from \"../staking-management/IStakingManagement.sol\";\nimport {Constants} from \"../library/Constants.sol\";\nimport {IStaking} from \"./IStaking.sol\";\n\ncontract Staking is IStaking, Context {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * @dev Staking token (IQT).\n     */\n    IERC20 internal _stakingToken;\n\n    /**\n     * @dev IStakingManagement instance\n     */\n    IStakingManagement internal _stakingManagement;\n\n    /**\n     * @dev User stakes data.\n     */\n    mapping(address => EnumerableSet.UintSet) private _userStakes;\n\n    /**\n     * @dev Mapping from stakeId => Stake\n     */\n    mapping(uint256 => Stake) private _stakes;\n\n    /**\n     * @dev All stakes IDs.\n     */\n    EnumerableSet.UintSet private _allStakeIds;\n\n    /**\n     * @dev Reverts if the stake does not exist.\n     * @param stakeId Unique stake ID.\n     */\n    modifier onlyExistingStake(uint256 stakeId) {\n        if (!_isStakeExists(stakeId)) revert StakeDoesNotExist(stakeId);\n        _;\n    }\n\n    /**\n     * @dev Reverts if the caller is not the stake owner.\n     * @param stakeId Unique stake ID\n     */\n    modifier onlyStakeOwner(uint256 stakeId) {\n        if (_msgSender() != _stakes[stakeId].staker) revert CallerIsNotStakeOwner(stakeId);\n        _;\n    }\n\n    /**\n     * @dev Constructor.\n     * @param stakingManagement Address of the staking management contract.\n     */\n    constructor(address stakingManagement) {\n        _stakingManagement = IStakingManagement(stakingManagement);\n        _stakingToken = IERC20(_stakingManagement.getStakingToken());\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function stake(uint256 amount, uint256 stakingPlan) external override returns (uint256) {\n        _stakingManagement.checkStakingPlanExists(stakingPlan);\n\n        uint256 stakeId = _allStakeIds.length();\n        _userStakes[_msgSender()].add(stakeId);\n        _allStakeIds.add(stakeId);\n\n        uint256 stakingPlanDuration = _stakingManagement.getStakingPlan(stakingPlan).duration;\n\n        _stakes[stakeId] = Stake({\n            staker: _msgSender(),\n            amount: amount,\n            stakingPlanId: stakingPlan,\n            startTimestamp: block.timestamp,\n            endTimestamp: block.timestamp + stakingPlanDuration,\n            earningsInTokens: 0,\n            earningsPercentage: 0,\n            earlyWithdrawal: false,\n            withdrawn: false\n        });\n\n        _stakingToken.transferFrom(_msgSender(), address(this), amount);\n\n        emit StakeAdded(_msgSender(), stakeId);\n\n        return stakeId;\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function withdraw(uint256 stakeId) external override onlyStakeOwner(stakeId) onlyExistingStake(stakeId) {\n        Stake storage stakeRecord = _stakes[stakeId];\n        uint256 currentTimestamp = block.timestamp;\n\n        if (stakeRecord.withdrawn) revert StakeAlreadyWithdrawn(stakeId);\n        if (currentTimestamp < stakeRecord.endTimestamp) {\n            if (!_stakingManagement.isWithdrawEnabled()) {\n                revert EarlyWithdrawalNotAllowed(currentTimestamp, stakeRecord.endTimestamp);\n            }\n            uint256 withdrawalAmount = stakeRecord.amount;\n            stakeRecord.earlyWithdrawal = true;\n            stakeRecord.withdrawn = true;\n            _stakingToken.transfer(_msgSender(), withdrawalAmount);\n        } else {\n            (stakeRecord.earningsInTokens, stakeRecord.earningsPercentage) = calculateStakeEarnings(stakeId);\n            stakeRecord.withdrawn = true;\n            _stakingToken.transfer(_msgSender(), stakeRecord.amount + stakeRecord.earningsInTokens);\n        }\n\n        emit StakeWithdrawn(_msgSender(), stakeId);\n        _userStakes[_msgSender()].remove(stakeId);\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function getStake(uint256 stakeId) external view override onlyExistingStake(stakeId) returns (Stake memory) {\n        return _stakes[stakeId];\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function calculateStakeEarnings(\n        uint256 stakeId\n    ) public view override onlyExistingStake(stakeId) returns (uint256 earningsInTokens, uint16 earningsPercentage) {\n        Stake memory stakeRecord = _stakes[stakeId];\n        IStakingManagement.StakingPlan memory plan = _stakingManagement.getStakingPlan(stakeRecord.stakingPlanId);\n\n        uint256 timeFractionOfYear = plan.duration / Constants.SECONDS_IN_YEAR;\n        earningsInTokens = ((stakeRecord.amount * plan.apy) / Constants.MAX_APY) * timeFractionOfYear;\n        earningsPercentage = uint16((earningsInTokens * Constants.MAX_APY) / stakeRecord.amount);\n\n        return (earningsInTokens, earningsPercentage);\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function getStakes(address staker, uint256 offset, uint256 limit) external view override returns (Stake[] memory) {\n        uint256 stakeCount = _userStakes[staker].length();\n        if (offset >= stakeCount) {\n            return new Stake[](0);\n        }\n\n        if (offset + limit > stakeCount) {\n            limit = stakeCount - offset;\n        }\n\n        Stake[] memory stakes = new Stake[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            uint256 stakeId = _userStakes[staker].at(offset + i);\n            stakes[i] = _stakes[stakeId];\n        }\n\n        return stakes;\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function getStakeIds(address staker) external view override returns (uint256[] memory) {\n        return _userStakes[staker].values();\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function calculateTotalEarnings(\n        address staker\n    ) external view returns (uint256 totalEarningsInTokens, uint16 totalEarningsPercentage) {\n        uint256[] memory stakeIds = _userStakes[staker].values();\n        totalEarningsInTokens = 0;\n        uint256 totalStakedAmount = 0;\n\n        for (uint256 i = 0; i < stakeIds.length; i++) {\n            (uint256 earningsInTokens, ) = calculateStakeEarnings(stakeIds[i]);\n            totalEarningsInTokens += earningsInTokens;\n\n            Stake memory stakeRecord = _stakes[stakeIds[i]];\n            totalStakedAmount += stakeRecord.amount;\n        }\n\n        if (totalStakedAmount > 0) {\n            totalEarningsPercentage = uint16((totalEarningsInTokens * Constants.MAX_APY) / totalStakedAmount);\n        } else {\n            totalEarningsPercentage = 0;\n        }\n\n        return (totalEarningsInTokens, totalEarningsPercentage);\n    }\n\n    /**\n     * @inheritdoc IStaking\n     */\n    function isStakeExists(uint256 stakeId) external view override returns (bool) {\n        return _isStakeExists(stakeId);\n    }\n\n    /**\n     * @dev Returns `true` if a stake exists.\n     * @param stakeId Unique ID of the stake.\n     */\n    function _isStakeExists(uint256 stakeId) internal view returns (bool) {\n        return _allStakeIds.contains(stakeId);\n    }\n}\n"
    },
    "contracts/timelock/BatchTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ITerminateable.sol\";\nimport \"./IBatchTimelock.sol\";\nimport \"./IVestingPool.sol\";\n\ncontract BatchTimelock is Ownable, ITerminateable, IBatchTimelock, IVestingPool {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Token that will be vested (IQT).\n     * @dev Link to IQT repository: https://github.com/iqlabsorg/iqt-eth\n     */\n    IERC20 internal _token;\n\n    /**\n     * @notice Address of the vesting pool.\n     */\n    address internal _vestingPool;\n\n    /**\n     * @notice Array of all receiver addresses.\n     */\n    EnumerableSet.AddressSet internal _allReceivers;\n\n    /**\n     * @notice Mapping of all timelocks.\n     */\n    mapping(address => Timelock) internal _timelocks;\n\n    /**\n     * @notice Checks if the timelock exists\n     */\n    modifier onlyReceiver() {\n        if (_timelocks[_msgSender()].receiver == _msgSender()) {\n            revert InvalidReceiverAddress();\n        }\n        _;\n    }\n\n    /**\n     * @notice Reverts if the timelock does not exist.\n    */\n    constructor(IERC20 token, address vestingPool) {\n        _token = token;\n        _vestingPool = vestingPool;\n    }\n\n    /**\n     * @inheritdoc ITerminateable\n     */\n    function terminate(address receiver, uint256 terminationFrom) external onlyOwner {\n        Timelock storage lock = _timelocks[receiver];\n\n        if (lock.lockFrom >= terminationFrom) {\n            revert TerminationTimeMustBeAfterLockStart(terminationFrom, lock.lockFrom);\n        }\n\n        lock.terminationFrom = terminationFrom;\n        lock.isTerminated = true;\n\n        emit TimelockTerminated(receiver, terminationFrom);\n    }\n\n    /**\n     * @inheritdoc ITerminateable\n     */\n    function determinate(address receiver) external onlyOwner {\n        Timelock storage lock = _timelocks[receiver];\n        lock.isTerminated = false;\n        lock.terminationFrom = 0;\n\n        emit TimelockDeterminated(receiver);\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function addTimelockBatch(Receiver[] memory receivers) external onlyOwner {\n        if (receivers.length == 0) {\n            revert EmptyReceiversArray();\n        }\n\n        for (uint256 i = 0; i < receivers.length; i++) {\n            _addTimelock(receivers[i].receiver, receivers[i].totalAmount, receivers[i].cliffDuration, receivers[i].vestingDuration);\n        }\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function addTimelock(address receiver, uint256 totalAmount, uint256 cliffDuration, uint256 vestingDuration) external onlyOwner {\n      _addTimelock(receiver, totalAmount, cliffDuration, vestingDuration);\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n     */\n    function claim(uint256 amount) external onlyReceiver {\n        if (amount == 0) {\n            revert ZeroClaimAmount();\n        }\n\n        Timelock storage lock = _timelocks[msg.sender];\n\n        if (lock.isTerminated && block.timestamp >= lock.terminationFrom) {\n            revert TimelockIsTerminated(msg.sender, lock.terminationFrom);\n        }\n\n        uint256 withdrawable = getClaimableBalance(msg.sender);\n\n        if (amount > withdrawable) {\n            revert AmountExceedsWithdrawableAllowance(amount, withdrawable);\n        }\n\n        lock.releasedAmount += amount;\n\n        if (!_token.transferFrom(_vestingPool, msg.sender, amount)) {\n            revert TokenTransferFailed(_vestingPool, msg.sender, amount);\n        }\n\n        emit TokensClaimed(msg.sender, amount);\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n     */\n    function getClaimableBalance(address receiver) public view returns (uint256) {\n        uint256 blockTimestampNow = block.timestamp;\n        Timelock storage lock = _timelocks[receiver];\n        uint256 lockFromPlusCliff = lock.lockFrom + lock.cliffDuration;\n\n        if (lock.isTerminated && blockTimestampNow >= lock.terminationFrom) {\n            return 0;\n        }\n\n        if (blockTimestampNow < lockFromPlusCliff) {\n            return 0;\n        }\n\n        if (blockTimestampNow >= lockFromPlusCliff + lock.vestingDuration) {\n            return lock.totalAmount - lock.releasedAmount;\n        }\n\n        uint256 timeIntoVesting = blockTimestampNow - lockFromPlusCliff;\n        uint256 vestedPortion = (lock.totalAmount * timeIntoVesting) / lock.vestingDuration;\n\n        return vestedPortion - lock.releasedAmount;\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function getTimelock(address receiver) public view returns (Timelock memory) {\n        return _timelocks[receiver];\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n   function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory) {\n        uint256 receiverCount = _allReceivers.length();\n        if (offset >= receiverCount) {\n            return new address[](0);\n        }\n\n        if (offset + limit > receiverCount) {\n            limit = receiverCount - offset;\n        }\n\n        address[] memory receivers = new address[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            receivers[i] = _allReceivers.at(offset + i);\n        }\n\n        return receivers;\n    }\n\n    /**\n     * @inheritdoc IBatchTimelock\n    */\n    function getTimelockReceiversAmount() external view returns (uint256) {\n        return _allReceivers.length();\n   }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getCurrentAllowance() public view returns (uint256) {\n        return _token.allowance(_vestingPool, address(this));\n    }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getTotalTokensLocked() public view returns (uint256) {\n        uint256 total = 0;\n        for (uint256 i = 0; i < _allReceivers.length(); i++) {\n            total += _timelocks[_allReceivers.at(i)].totalAmount;\n        }\n        return total;\n    }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getVestingPoolAddress() public view returns (address) {\n        return _vestingPool;\n    }\n\n    /**\n     * @inheritdoc IVestingPool\n     */\n    function getTokenAddress() public view returns (address) {\n        return address(_token);\n    }\n\n    /**\n     * @notice Creates new timelock for the receiver.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param cliffTimeInMonths Cliff time in months (6 months default).\n     * @param vestingDurationInMonths Vesting duration in months (18/24 months).\n    */\n    function _addTimelock(address receiver, uint256 totalAmount, uint256 cliffTimeInMonths, uint256 vestingDurationInMonths) internal onlyOwner {\n        if (receiver == address(0)) revert InvalidReceiverAddress();\n        if (totalAmount == 0) revert InvalidTimelockAmount();\n        if (_allReceivers.contains(receiver)) revert ReceiverAlreadyHasATimelock(receiver);\n\n        uint256 cliffTime = block.timestamp + (cliffTimeInMonths * 30 days);\n        uint256 vestingDuration = vestingDurationInMonths * 30 days;\n        _timelocks[receiver] = Timelock(receiver, totalAmount, 0, cliffTime, cliffTime, vestingDuration, 0, false);\n        _allReceivers.add(receiver);\n\n        emit TimelockCreated(receiver, totalAmount, cliffTime, vestingDuration);\n    }\n}"
    },
    "contracts/timelock/IBatchTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IBatchTimelock {\n    /**\n     * @notice Reverts if amount exceeds vesting allowance.\n     * @param amount Amount of tokens to be claimed.\n     * @param claimable Amount of tokens that can be claimed.\n     */\n    error AmountExceedsWithdrawableAllowance(uint256 amount, uint256 claimable);\n\n    /**\n     * @notice Reverts if cliff period has not ended.\n     */\n    error CliffPeriodNotEnded(uint256 timeNow, uint256 cliffEndsAt);\n\n    /**\n     * @notice Reverts if vesting period has not started.\n     */\n    error ZeroAllocation();\n\n    /**\n     * @notice Reverts if empty receivers array is passed.\n     */\n    error EmptyReceiversArray();\n\n    /**\n     * @notice Reverts if invalid receiver address is passed.\n     */\n    error InvalidReceiverAddress();\n\n    /**\n     * @notice Reverts if invalid timelock amount is passed.\n     */\n    error InvalidTimelockAmount();\n\n    /**\n     * @notice Reverts if receiver already has a timelock.\n     * @param receiver Address of the receiver.\n     */\n    error ReceiverAlreadyHasATimelock(address receiver);\n\n    /**\n     * @notice Reverts if zero claim amount is passed.\n    */\n    error ZeroClaimAmount();\n\n    /**\n     * @notice Reverts if token transfer failed.\n     * @param tokenPool Address of the token pool.\n     * @param receiver Address of the receiver.\n     * @param amount Amount of tokens transferred.\n    */\n    error TokenTransferFailed(address tokenPool, address receiver, uint256 amount);\n\n    /**\n     * @notice Token receiver struct that is used for adding _timelocks for timelock.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param cliffDuration Cliff time in months (6 months default).\n     * @param vestingDuration Vesting duration in months (18/24 months).\n     */\n    struct Receiver {\n        address receiver;\n        uint256 totalAmount;\n        uint256 cliffDuration;\n        uint256 vestingDuration;\n    }\n\n    /**\n     * @notice Timelock struct that is used for vesting.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param releasedAmount Amount of tokens released.\n     * @param lockFrom Timestamp from which tokens will start to vest.\n     * @param cliffDuration Cliff time in months (6 months default).\n     * @param vestingDuration Vesting duration in months (18/24 months).\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     * @param isTerminated Flag that indicates if timelock is terminated.\n     */\n    struct Timelock {\n        address receiver;\n        uint256 totalAmount;\n        uint256 releasedAmount;\n        uint256 lockFrom;\n        uint256 cliffDuration;\n        uint256 vestingDuration;\n        uint256 terminationFrom;\n        bool isTerminated;\n    }\n\n    /**\n     * @notice Emits when timelock is created.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param cliffDuration Cliff time in months (6 months default).\n     * @param vestingDuration Vesting duration in months (18/24 months).\n     */\n    event TimelockCreated(address indexed receiver, uint256 totalAmount, uint256 cliffDuration, uint256 vestingDuration);\n\n    /**\n     * @notice Emits when tokens are claimed.\n     * @param receiver Address of the claimer.\n     * @param amount Amount of tokens claimed.\n     */\n    event TokensClaimed(address indexed receiver, uint256 amount);\n\n    /**\n     * @notice Creates timelock for token receivers in a batch mode.\n     * @param receivers Array of receivers.\n     */\n    function addTimelockBatch(Receiver[] memory receivers) external;\n\n    /**\n     * @notice Creates timelock for token receiver.\n     * @param receiver Address of the receiver.\n     * @param totalAmount Total amount of tokens to be vested.\n     * @param cliffDuration Cliff time in months (6 months default).\n     * @param vestingDuration Vesting duration in months (18/24 months).\n    */\n    function addTimelock(address receiver, uint256 totalAmount, uint256 cliffDuration, uint256 vestingDuration) external;\n\n    /**\n     * @notice Claims tokens for the receiver.\n     * @param amount Amount of tokens to be claimed.\n     */\n    function claim(uint256 amount) external;\n\n    /**\n     * @notice Returns the timelock data.\n     * @param receiver Address of the receiver.\n     */\n    function getTimelock(address receiver) external view returns (Timelock memory);\n\n    /**\n     * @notice Returns the amount of tokens that are currently allowed for claim.\n     * @param receiver Address of the receiver.\n     */\n    function getClaimableBalance(address receiver) external view returns (uint256);\n\n    /**\n     * @notice Returns the array of timelock receivers.\n     * @param offset Offset from which receivers will be returned.\n     * @param limit Limit of receivers to be returned.\n     */\n    function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the amount of timelock receivers.\n     */\n    function getTimelockReceiversAmount() external view returns (uint256);\n}"
    },
    "contracts/timelock/ITerminateable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ITerminateable {\n    /**\n     * @notice Reverts if termination time is before lock start.\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     * @param lockFrom Timestamp from which tokens will be locked.\n    */\n    error TerminationTimeMustBeAfterLockStart(uint256 terminationFrom, uint256 lockFrom);\n\n    /**\n     * @notice Reverts if timelock is terminated\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n    */\n    error TimelockIsTerminated(address receiver, uint256 terminationFrom);\n\n    /**\n     * @notice Emits when timelock is terminated.\n     * @param receiver Address of the receiver.\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     */\n    event TimelockTerminated(address indexed receiver, uint256 terminationFrom);\n\n    /**\n     * @notice Emits when timelock is determinated.\n     * @param receiver Address of the receiver.\n     */\n    event TimelockDeterminated(address indexed receiver);\n\n    /**\n     * @notice Terminates timelock for the receiver.\n     * @param receiver Address of the receiver.\n     * @param terminationFrom Timestamp from which tokens will be terminated.\n     */\n    function terminate(address receiver, uint256 terminationFrom) external;\n\n    /**\n     * @notice Determinates timelock for the receiver.\n     * @param receiver Address of the receiver.\n     */\n    function determinate(address receiver) external;\n}"
    },
    "contracts/timelock/IVestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IVestingPool {\n    /**\n     * @notice Returns the amount of tokens that are currently allowed for transfer.\n     */\n    function getCurrentAllowance() external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of tokens that are currently locked.\n     */\n    function getTotalTokensLocked() external view returns (uint256);\n\n    /**\n     * @notice Returns the address of vesting pool.\n     */\n    function getVestingPoolAddress() external view returns (address);\n\n    /**\n     * @notice Returns the address of token.\n     */\n    function getTokenAddress() external view returns (address);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}