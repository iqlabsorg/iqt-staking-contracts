{
  "address": "0x18E317A7D70d8fBf8e6E893616b52390EbBdb629",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vestingPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        }
      ],
      "name": "AmountExceedsWithdrawableAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeNow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffEndsAt",
          "type": "uint256"
        }
      ],
      "name": "CliffPeriodNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyReceiversArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTimelockAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ReceiverAlreadyHasATimelock",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "terminationFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockFrom",
          "type": "uint256"
        }
      ],
      "name": "TerminationTimeMustBeAfterLockStart",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAllocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroClaimAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelockFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliffDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        }
      ],
      "name": "TimelockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "TimelockDeterminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "terminationFrom",
          "type": "uint256"
        }
      ],
      "name": "TimelockTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelockFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        }
      ],
      "name": "addTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timelockFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBatchTimelock.Receiver[]",
          "name": "receivers",
          "type": "tuple[]"
        }
      ],
      "name": "addTimelockBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "determinate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getClaimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getTimelock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timelockFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationFrom",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTerminated",
              "type": "bool"
            }
          ],
          "internalType": "struct IBatchTimelock.Timelock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getTimelockReceivers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimelockReceiversAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokensLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "terminationFrom",
          "type": "uint256"
        }
      ],
      "name": "terminate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbb495b3f3b78ac61c8cba2acd7b083616ffc0dd8e0cdacf65f263c6f584241e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x18E317A7D70d8fBf8e6E893616b52390EbBdb629",
    "transactionIndex": 0,
    "gasUsed": "1117290",
    "logsBloom": "0x00000000001000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000001000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000000000022000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2496b14d55b6fc6ac4991ae626328421a36ffb7a4033bb8a57a96ecaee396687",
    "transactionHash": "0xfbb495b3f3b78ac61c8cba2acd7b083616ffc0dd8e0cdacf65f263c6f584241e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 146,
        "transactionHash": "0xfbb495b3f3b78ac61c8cba2acd7b083616ffc0dd8e0cdacf65f263c6f584241e",
        "address": "0x18E317A7D70d8fBf8e6E893616b52390EbBdb629",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2496b14d55b6fc6ac4991ae626328421a36ffb7a4033bb8a57a96ecaee396687"
      }
    ],
    "blockNumber": 146,
    "cumulativeGasUsed": "1117290",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe8D2A1E88c91DCd5433208d4152Cc4F399a7e91d",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "a3c7998297c0bcbf59bf1d5622663257",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vestingPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"name\":\"AmountExceedsWithdrawableAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffEndsAt\",\"type\":\"uint256\"}],\"name\":\"CliffPeriodNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyReceiversArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimelockAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ReceiverAlreadyHasATimelock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFrom\",\"type\":\"uint256\"}],\"name\":\"TerminationTimeMustBeAfterLockStart\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroClaimAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"name\":\"TimelockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TimelockDeterminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"}],\"name\":\"TimelockTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"name\":\"addTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct IBatchTimelock.Receiver[]\",\"name\":\"receivers\",\"type\":\"tuple[]\"}],\"name\":\"addTimelockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"determinate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getClaimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getTimelock\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTerminated\",\"type\":\"bool\"}],\"internalType\":\"struct IBatchTimelock.Timelock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getTimelockReceivers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelockReceiversAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AmountExceedsWithdrawableAllowance(uint256,uint256)\":[{\"params\":{\"amount\":\"Amount of tokens to be claimed.\",\"claimable\":\"Amount of tokens that can be claimed.\"}}],\"ReceiverAlreadyHasATimelock(address)\":[{\"params\":{\"receiver\":\"Address of the receiver.\"}}],\"TerminationTimeMustBeAfterLockStart(uint256,uint256)\":[{\"params\":{\"lockFrom\":\"Timestamp from which tokens will be locked.\",\"terminationFrom\":\"Timestamp from which tokens will be terminated.\"}}],\"TokenTransferFailed(address,address,uint256)\":[{\"params\":{\"amount\":\"Amount of tokens transferred.\",\"receiver\":\"Address of the receiver.\",\"tokenPool\":\"Address of the token pool.\"}}]},\"events\":{\"TimelockCreated(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"cliffDuration\":\"Cliff time in seconds (6 months default).\",\"receiver\":\"Address of the receiver.\",\"totalAmount\":\"Total amount of tokens to be vested.\",\"vestingDuration\":\"Vesting duration in seconds (18/24 months).\"}},\"TimelockDeterminated(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"TimelockTerminated(address,uint256)\":{\"params\":{\"receiver\":\"Address of the receiver.\",\"terminationFrom\":\"Timestamp from which tokens will be terminated.\"}},\"TokensClaimed(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens claimed.\",\"receiver\":\"Address of the claimer.\"}}},\"kind\":\"dev\",\"methods\":{\"addTimelock(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"cliffDuration\":\"Cliff time in seconds (6 months default).\",\"receiver\":\"Address of the receiver.\",\"timelockFrom\":\"Timestamp from which the timelock will start.\",\"totalAmount\":\"Total amount of tokens to be vested.\",\"vestingDuration\":\"Vesting duration in seconds (18/24 months).\"}},\"addTimelockBatch((address,uint256,uint256,uint256,uint256)[])\":{\"params\":{\"receivers\":\"Array of receivers.\"}},\"claim(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to be claimed.\"}},\"determinate(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"getClaimableBalance(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"getTimelock(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"getTimelockReceivers(uint256,uint256)\":{\"params\":{\"limit\":\"Limit of receivers to be returned.\",\"offset\":\"Offset from which receivers will be returned.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"terminate(address,uint256)\":{\"params\":{\"receiver\":\"Address of the receiver.\",\"terminationFrom\":\"Timestamp from which tokens will be terminated.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_token\":{\"details\":\"Link to IQT repository: https://github.com/iqlabsorg/iqt-eth\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountExceedsWithdrawableAllowance(uint256,uint256)\":[{\"notice\":\"Reverts if amount exceeds vesting allowance.\"}],\"CliffPeriodNotEnded(uint256,uint256)\":[{\"notice\":\"Reverts if cliff period has not ended.\"}],\"EmptyReceiversArray()\":[{\"notice\":\"Reverts if empty receivers array is passed.\"}],\"InvalidReceiverAddress()\":[{\"notice\":\"Reverts if invalid receiver address is passed.\"}],\"InvalidTimelockAmount()\":[{\"notice\":\"Reverts if invalid timelock amount is passed.\"}],\"ReceiverAlreadyHasATimelock(address)\":[{\"notice\":\"Reverts if receiver already has a timelock.\"}],\"TerminationTimeMustBeAfterLockStart(uint256,uint256)\":[{\"notice\":\"Reverts if termination time is before lock start.\"}],\"TokenTransferFailed(address,address,uint256)\":[{\"notice\":\"Reverts if token transfer failed.\"}],\"ZeroAllocation()\":[{\"notice\":\"Reverts if vesting period has not started.\"}],\"ZeroClaimAmount()\":[{\"notice\":\"Reverts if zero claim amount is passed.\"}]},\"events\":{\"TimelockCreated(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emits when timelock is created.\"},\"TimelockDeterminated(address)\":{\"notice\":\"Emits when timelock is determinated.\"},\"TimelockTerminated(address,uint256)\":{\"notice\":\"Emits when timelock is terminated.\"},\"TokensClaimed(address,uint256)\":{\"notice\":\"Emits when tokens are claimed.\"}},\"kind\":\"user\",\"methods\":{\"addTimelock(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Creates timelock for token receiver.\"},\"addTimelockBatch((address,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Creates timelock for token receivers in a batch mode.\"},\"claim(uint256)\":{\"notice\":\"Claims tokens for the receiver.\"},\"constructor\":{\"notice\":\"Reverts if the timelock does not exist.\"},\"determinate(address)\":{\"notice\":\"Determinates timelock for the receiver.\"},\"getClaimableBalance(address)\":{\"notice\":\"Returns the amount of tokens that are currently allowed for claim.\"},\"getCurrentAllowance()\":{\"notice\":\"Returns the amount of tokens that are currently allowed for transfer.\"},\"getTimelock(address)\":{\"notice\":\"Returns the timelock data.\"},\"getTimelockReceivers(uint256,uint256)\":{\"notice\":\"Returns the array of timelock receivers.\"},\"getTimelockReceiversAmount()\":{\"notice\":\"Returns the amount of timelock receivers.\"},\"getTokenAddress()\":{\"notice\":\"Returns the address of token.\"},\"getTotalTokensLocked()\":{\"notice\":\"Returns the amount of tokens that are currently locked.\"},\"getVestingPoolAddress()\":{\"notice\":\"Returns the address of vesting pool.\"},\"terminate(address,uint256)\":{\"notice\":\"Terminates timelock for the receiver.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/timelock/BatchTimelock.sol\":\"BatchTimelock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/timelock/BatchTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./ITerminateable.sol\\\";\\nimport \\\"./IBatchTimelock.sol\\\";\\nimport \\\"./IVestingPool.sol\\\";\\n\\ncontract BatchTimelock is Ownable, ITerminateable, IBatchTimelock, IVestingPool {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Token that will be vested (IQT).\\n     * @dev Link to IQT repository: https://github.com/iqlabsorg/iqt-eth\\n     */\\n    IERC20 internal _token;\\n\\n    /**\\n     * @notice Address of the vesting pool.\\n     */\\n    address internal _vestingPool;\\n\\n    /**\\n     * @notice Array of all receiver addresses.\\n     */\\n    EnumerableSet.AddressSet internal _allReceivers;\\n\\n    /**\\n     * @notice Mapping of all timelocks.\\n     */\\n    mapping(address => Timelock) internal _timelocks;\\n\\n    /**\\n     * @notice Checks if the timelock exists\\n     */\\n    modifier onlyReceiver() {\\n        if (_timelocks[_msgSender()].receiver != _msgSender()) {\\n            revert InvalidReceiverAddress();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the timelock does not exist.\\n    */\\n    constructor(IERC20 token, address vestingPool) {\\n        _token = token;\\n        _vestingPool = vestingPool;\\n    }\\n\\n    /**\\n     * @inheritdoc ITerminateable\\n     */\\n    function terminate(address receiver, uint256 terminationFrom) external onlyOwner {\\n        Timelock storage lock = _timelocks[receiver];\\n\\n        if (lock.timelockFrom >= terminationFrom) {\\n            revert TerminationTimeMustBeAfterLockStart(terminationFrom, lock.timelockFrom);\\n        }\\n\\n        lock.terminationFrom = terminationFrom;\\n        lock.isTerminated = true;\\n\\n        emit TimelockTerminated(receiver, terminationFrom);\\n    }\\n\\n    /**\\n     * @inheritdoc ITerminateable\\n     */\\n    function determinate(address receiver) external onlyOwner {\\n        Timelock storage lock = _timelocks[receiver];\\n        lock.isTerminated = false;\\n        lock.terminationFrom = 0;\\n\\n        emit TimelockDeterminated(receiver);\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function addTimelockBatch(Receiver[] memory receivers) external onlyOwner {\\n        if (receivers.length == 0) {\\n            revert EmptyReceiversArray();\\n        }\\n\\n        for (uint256 i = 0; i < receivers.length; i++) {\\n            _addTimelock(\\n                receivers[i].receiver,\\n                receivers[i].totalAmount,\\n                receivers[i].timelockFrom,\\n                receivers[i].cliffDuration,\\n                receivers[i].vestingDuration\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) external onlyOwner {\\n      _addTimelock(receiver, totalAmount, timelockFrom, cliffDuration, vestingDuration);\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n     */\\n    function claim(uint256 amount) external onlyReceiver {\\n        if (amount == 0) {\\n            revert ZeroClaimAmount();\\n        }\\n\\n        Timelock storage lock = _timelocks[_msgSender()];\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        if (blockTimestamp < lock.timelockFrom + lock.cliffDuration) {\\n            revert CliffPeriodNotEnded(blockTimestamp, lock.timelockFrom + lock.cliffDuration);\\n        }\\n\\n        uint256 withdrawable = getClaimableBalance(_msgSender());\\n\\n        if (amount > withdrawable) {\\n            revert AmountExceedsWithdrawableAllowance(amount, withdrawable);\\n        }\\n\\n        lock.releasedAmount += amount;\\n\\n        if (!_token.transferFrom(_vestingPool, _msgSender(), amount)) {\\n            revert TokenTransferFailed(_vestingPool, _msgSender(), amount);\\n        }\\n\\n        emit TokensClaimed(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n     */\\n    function getClaimableBalance(address receiver) public view returns (uint256) {\\n        Timelock storage lock = _timelocks[receiver];\\n        uint256 lockFromPlusCliff = lock.timelockFrom + lock.cliffDuration;\\n        uint256 blockTimestampNow = block.timestamp;\\n\\n        if (blockTimestampNow < lockFromPlusCliff) {\\n            return 0;\\n        }\\n\\n        uint256 vestedTime;\\n        if (lock.isTerminated) {\\n            vestedTime = lock.terminationFrom > lockFromPlusCliff\\n                ? lock.terminationFrom - lockFromPlusCliff\\n                : 0;\\n        } else {\\n            uint256 vestingEnd = lockFromPlusCliff + lock.vestingDuration;\\n            vestedTime = blockTimestampNow < vestingEnd\\n                ? blockTimestampNow - lockFromPlusCliff\\n                : lock.vestingDuration;\\n        }\\n        uint256 vestedPortion = (lock.totalAmount * vestedTime) / lock.vestingDuration;\\n\\n        uint256 claimable = vestedPortion > lock.releasedAmount\\n            ? vestedPortion - lock.releasedAmount\\n            : 0;\\n\\n        if (lock.isTerminated && blockTimestampNow >= lock.terminationFrom) {\\n            return claimable;\\n        }\\n\\n        return claimable;\\n    }\\n\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function getTimelock(address receiver) public view returns (Timelock memory) {\\n        return _timelocks[receiver];\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n   function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory) {\\n        uint256 receiverCount = _allReceivers.length();\\n        if (offset >= receiverCount) {\\n            return new address[](0);\\n        }\\n\\n        if (offset + limit > receiverCount) {\\n            limit = receiverCount - offset;\\n        }\\n\\n        address[] memory receivers = new address[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            receivers[i] = _allReceivers.at(offset + i);\\n        }\\n\\n        return receivers;\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function getTimelockReceiversAmount() external view returns (uint256) {\\n        return _allReceivers.length();\\n   }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getCurrentAllowance() public view returns (uint256) {\\n        return _token.allowance(_vestingPool, address(this));\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getTotalTokensLocked() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _allReceivers.length(); i++) {\\n            total += _timelocks[_allReceivers.at(i)].totalAmount;\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getVestingPoolAddress() public view returns (address) {\\n        return _vestingPool;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getTokenAddress() public view returns (address) {\\n        return address(_token);\\n    }\\n\\n    /**\\n     * @notice Creates new timelock for the receiver.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param timelockFrom Timestamp from which the timelock will start.\\n     * @param cliffDuration Cliff time in seconds (6 months default).\\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\\n    */\\n    function _addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) internal onlyOwner {\\n        if (receiver == address(0)) revert InvalidReceiverAddress();\\n        if (totalAmount == 0) revert InvalidTimelockAmount();\\n        if (_allReceivers.contains(receiver)) revert ReceiverAlreadyHasATimelock(receiver);\\n\\n        _timelocks[receiver] = Timelock({\\n            receiver: receiver,\\n            totalAmount: totalAmount,\\n            releasedAmount: 0,\\n            timelockFrom: timelockFrom,\\n            cliffDuration: cliffDuration,\\n            vestingDuration: vestingDuration,\\n            isTerminated: false,\\n            terminationFrom: 0\\n        });\\n        _allReceivers.add(receiver);\\n\\n        emit TimelockCreated(receiver, totalAmount, timelockFrom, cliffDuration, vestingDuration);\\n    }\\n}\",\"keccak256\":\"0x8b557b5bfb020e03842b4e379806c619b1b439eee2e91164dc3fdfb9cb988629\",\"license\":\"MIT\"},\"contracts/timelock/IBatchTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IBatchTimelock {\\n    /**\\n     * @notice Reverts if amount exceeds vesting allowance.\\n     * @param amount Amount of tokens to be claimed.\\n     * @param claimable Amount of tokens that can be claimed.\\n     */\\n    error AmountExceedsWithdrawableAllowance(uint256 amount, uint256 claimable);\\n\\n    /**\\n     * @notice Reverts if cliff period has not ended.\\n     */\\n    error CliffPeriodNotEnded(uint256 timeNow, uint256 cliffEndsAt);\\n\\n    /**\\n     * @notice Reverts if vesting period has not started.\\n     */\\n    error ZeroAllocation();\\n\\n    /**\\n     * @notice Reverts if empty receivers array is passed.\\n     */\\n    error EmptyReceiversArray();\\n\\n    /**\\n     * @notice Reverts if invalid receiver address is passed.\\n     */\\n    error InvalidReceiverAddress();\\n\\n    /**\\n     * @notice Reverts if invalid timelock amount is passed.\\n     */\\n    error InvalidTimelockAmount();\\n\\n    /**\\n     * @notice Reverts if receiver already has a timelock.\\n     * @param receiver Address of the receiver.\\n     */\\n    error ReceiverAlreadyHasATimelock(address receiver);\\n\\n    /**\\n     * @notice Reverts if zero claim amount is passed.\\n    */\\n    error ZeroClaimAmount();\\n\\n    /**\\n     * @notice Reverts if token transfer failed.\\n     * @param tokenPool Address of the token pool.\\n     * @param receiver Address of the receiver.\\n     * @param amount Amount of tokens transferred.\\n    */\\n    error TokenTransferFailed(address tokenPool, address receiver, uint256 amount);\\n\\n    /**\\n     * @notice Token receiver struct that is used for adding _timelocks for timelock.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param timelockFrom Timestamp from which the timelock will start.\\n     * @param cliffDuration Cliff time in months (6 months default).\\n     * @param vestingDuration Vesting duration in months (18/24 months).\\n     */\\n    struct Receiver {\\n        address receiver;\\n        uint256 totalAmount;\\n        uint256 timelockFrom;\\n        uint256 cliffDuration;\\n        uint256 vestingDuration;\\n    }\\n\\n    /**\\n     * @notice Timelock struct that is used for vesting.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param releasedAmount Amount of tokens released.\\n     * @param lockFrom Timestamp from which tokens will start to vest.\\n     * @param cliffDuration Cliff time in months (6 months default).\\n     * @param vestingDuration Vesting duration in months (18/24 months).\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     * @param isTerminated Flag that indicates if timelock is terminated.\\n     */\\n    struct Timelock {\\n        address receiver;\\n        uint256 totalAmount;\\n        uint256 releasedAmount;\\n        uint256 timelockFrom;\\n        uint256 cliffDuration;\\n        uint256 vestingDuration;\\n        uint256 terminationFrom;\\n        bool isTerminated;\\n    }\\n\\n    /**\\n     * @notice Emits when timelock is created.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param cliffDuration Cliff time in seconds (6 months default).\\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\\n     */\\n    event TimelockCreated(address indexed receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration);\\n\\n    /**\\n     * @notice Emits when tokens are claimed.\\n     * @param receiver Address of the claimer.\\n     * @param amount Amount of tokens claimed.\\n     */\\n    event TokensClaimed(address indexed receiver, uint256 amount);\\n\\n    /**\\n     * @notice Creates timelock for token receivers in a batch mode.\\n     * @param receivers Array of receivers.\\n     */\\n    function addTimelockBatch(Receiver[] memory receivers) external;\\n\\n    /**\\n     * @notice Creates timelock for token receiver.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param timelockFrom Timestamp from which the timelock will start.\\n     * @param cliffDuration Cliff time in seconds (6 months default).\\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\\n    */\\n    function addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) external;\\n\\n    /**\\n     * @notice Claims tokens for the receiver.\\n     * @param amount Amount of tokens to be claimed.\\n     */\\n    function claim(uint256 amount) external;\\n\\n    /**\\n     * @notice Returns the timelock data.\\n     * @param receiver Address of the receiver.\\n     */\\n    function getTimelock(address receiver) external view returns (Timelock memory);\\n\\n    /**\\n     * @notice Returns the amount of tokens that are currently allowed for claim.\\n     * @param receiver Address of the receiver.\\n     */\\n    function getClaimableBalance(address receiver) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the array of timelock receivers.\\n     * @param offset Offset from which receivers will be returned.\\n     * @param limit Limit of receivers to be returned.\\n     */\\n    function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the amount of timelock receivers.\\n     */\\n    function getTimelockReceiversAmount() external view returns (uint256);\\n}\",\"keccak256\":\"0x744a4d302c5158d0b6c6d39b54d60267fdce6464d2d3462dec4bfb7ea158f49e\",\"license\":\"MIT\"},\"contracts/timelock/ITerminateable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ITerminateable {\\n    /**\\n     * @notice Reverts if termination time is before lock start.\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     * @param lockFrom Timestamp from which tokens will be locked.\\n    */\\n    error TerminationTimeMustBeAfterLockStart(uint256 terminationFrom, uint256 lockFrom);\\n\\n    /**\\n     * @notice Emits when timelock is terminated.\\n     * @param receiver Address of the receiver.\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     */\\n    event TimelockTerminated(address indexed receiver, uint256 terminationFrom);\\n\\n    /**\\n     * @notice Emits when timelock is determinated.\\n     * @param receiver Address of the receiver.\\n     */\\n    event TimelockDeterminated(address indexed receiver);\\n\\n    /**\\n     * @notice Terminates timelock for the receiver.\\n     * @param receiver Address of the receiver.\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     */\\n    function terminate(address receiver, uint256 terminationFrom) external;\\n\\n    /**\\n     * @notice Determinates timelock for the receiver.\\n     * @param receiver Address of the receiver.\\n     */\\n    function determinate(address receiver) external;\\n}\",\"keccak256\":\"0xe43c3d6eca24728a9b6795007f1cd99f2b3d39912715a0c6396c20d6bb415200\",\"license\":\"MIT\"},\"contracts/timelock/IVestingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVestingPool {\\n    /**\\n     * @notice Returns the amount of tokens that are currently allowed for transfer.\\n     */\\n    function getCurrentAllowance() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that are currently locked.\\n     */\\n    function getTotalTokensLocked() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of vesting pool.\\n     */\\n    function getVestingPoolAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of token.\\n     */\\n    function getTokenAddress() external view returns (address);\\n}\",\"keccak256\":\"0xac78e174e43794a5e253990f90f4077f2594902eb88a517b271729fee0b670a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161130638038061130683398101604081905261002f916100d1565b61003833610069565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561010b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ce57600080fd5b50565b600080604083850312156100e457600080fd5b82516100ef816100b9565b6020840151909250610100816100b9565b809150509250929050565b6111ec8061011a6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a604b44e11610097578063f275684d11610066578063f275684d14610247578063f2fde38b1461025a578063f458b5e61461026d578063f6d78b651461028d57600080fd5b8063a604b44e1461019f578063b9fea7d0146101a7578063bf1e799b146101ba578063ccc9305d1461023457600080fd5b8063379607f5116100d3578063379607f5146101695780634958e1a11461017e578063715018a6146101865780638da5cb5b1461018e57600080fd5b806303f7a68c1461010557806306def802146101205780630a463e1c1461013357806310fe9ae814610158575b600080fd5b61010d6102a0565b6040519081526020015b60405180910390f35b61010d61012e366004610e69565b610320565b6002546001600160a01b03165b6040516001600160a01b039091168152602001610117565b6001546001600160a01b0316610140565b61017c610177366004610e84565b61044b565b005b61010d610661565b61017c61066d565b6000546001600160a01b0316610140565b61010d610681565b61017c6101b5366004610e69565b6106e7565b6101cd6101c8366004610e69565b610747565b604051610117919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0828101519082015260c0808301519082015260e0918201511515918101919091526101000190565b61017c610242366004610e9d565b610817565b61017c610255366004610f37565b6108cb565b61017c610268366004610e69565b6109b5565b61028061027b366004611026565b610a2e565b6040516101179190611048565b61017c61029b366004611095565b610b27565b600154600254604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e90604401602060405180830381865afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b91906110d7565b905090565b6001600160a01b038116600090815260056020526040812060048101546003820154839161034d91611106565b9050428181101561036357506000949350505050565b600783015460009060ff161561039c5782846006015411610385576000610395565b8284600601546103959190611119565b90506103cf565b60008460050154846103ae9190611106565b90508083106103c15784600501546103cb565b6103cb8484611119565b9150505b600084600501548286600101546103e6919061112c565b6103f09190611143565b9050600085600201548211610406576000610415565b60028601546104159083611119565b600787015490915060ff168015610430575085600601548410155b1561044057979650505050505050565b979650505050505050565b336000818152600560205260409020546001600160a01b0316146104825760405163502ffa3f60e11b815260040160405180910390fd5b806000036104a3576040516360640efd60e11b815260040160405180910390fd5b3360009081526005602052604090206004810154600382015442916104c791611106565b81101561050a5780826004015483600301546104e39190611106565b6040516367f2a6c360e11b8152600481019290925260248201526044015b60405180910390fd5b600061051533610320565b9050808411156105425760405163271fb30560e21b81526004810185905260248101829052604401610501565b838360020160008282546105569190611106565b90915550506001546002546001600160a01b03918216916323b872dd9116336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018790526064016020604051808303816000875af11580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190611165565b6106265760025460405163190eecf360e31b81526001600160a01b03909116600482015233602482015260448101859052606401610501565b60405184815233907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309060200160405180910390a250505050565b600061031b6003610b43565b610675610b4d565b61067f6000610ba7565b565b600080805b6106906003610b43565b8110156106e157600560006106a6600384610bf7565b6001600160a01b031681526020810191909152604001600020600101546106cd9083611106565b9150806106d981611187565b915050610686565b50919050565b6106ef610b4d565b6001600160a01b03811660008181526005602052604080822060078101805460ff191690556006810183905590519092917f6f64e2246d8a5cd8d55ea99199b39ac605693722f899ac2405b7c54bae3eda7e91a25050565b61079a60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b0390811660009081526005602081815260409283902083516101008101855281549095168552600181015491850191909152600281015492840192909252600382015460608401526004820154608084015281015460a0830152600681015460c08301526007015460ff16151560e082015290565b61081f610b4d565b6001600160a01b03821660009081526005602052604090206003810154821161086b5760038101546040516349d7e3e960e01b8152610501918491600401918252602082015260400190565b6006810182905560078101805460ff191660011790556040516001600160a01b038416907f96a3db8ae0226bd6c5e331039c8dc9bad983d211de42680d9775dfbddb1b71a9906108be9085815260200190565b60405180910390a2505050565b6108d3610b4d565b80516000036108f55760405163d77fbd1d60e01b815260040160405180910390fd5b60005b81518110156109b15761099f828281518110610916576109166111a0565b602002602001015160000151838381518110610934576109346111a0565b602002602001015160200151848481518110610952576109526111a0565b602002602001015160400151858581518110610970576109706111a0565b60200260200101516060015186868151811061098e5761098e6111a0565b602002602001015160800151610c0a565b806109a981611187565b9150506108f8565b5050565b6109bd610b4d565b6001600160a01b038116610a225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610501565b610a2b81610ba7565b50565b60606000610a3c6003610b43565b9050808410610a5b575050604080516000815260208101909152610b21565b80610a668486611106565b1115610a7957610a768482611119565b92505b60008367ffffffffffffffff811115610a9457610a94610ec7565b604051908082528060200260200182016040528015610abd578160200160208202803683370190505b50905060005b84811015610b1c57610ae0610ad88288611106565b600390610bf7565b828281518110610af257610af26111a0565b6001600160a01b039092166020928302919091019091015280610b1481611187565b915050610ac3565b509150505b92915050565b610b2f610b4d565b610b3c8585858585610c0a565b5050505050565b6000610b21825490565b6000546001600160a01b0316331461067f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610501565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610c038383610da2565b9392505050565b610c12610b4d565b6001600160a01b038516610c395760405163502ffa3f60e11b815260040160405180910390fd5b83600003610c5a576040516307e7e9a960e21b815260040160405180910390fd5b610c65600386610dcc565b15610c8d57604051620118fb60e11b81526001600160a01b0386166004820152602401610501565b60408051610100810182526001600160a01b0387811680835260208084018981526000858701818152606087018b8152608088018b815260a089018b815260c08a0185815260e08b018681529886526005978890529a909420985189546001600160a01b03191698169790971788559251600188015551600287015590516003808701919091559351600486015551908401559251600683015591516007909101805460ff1916911515919091179055610d479086610dee565b506040805185815260208101859052908101839052606081018290526001600160a01b038616907f9f7f47e73fd629c582be438a08553de4dc70f4b96c2735ad7ff9ec4314096e859060800160405180910390a25050505050565b6000826000018281548110610db957610db96111a0565b9060005260206000200154905092915050565b6001600160a01b03811660009081526001830160205260408120541515610c03565b6000610c03836001600160a01b0384166000818152600183016020526040812054610e4557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b21565b506000610b21565b80356001600160a01b0381168114610e6457600080fd5b919050565b600060208284031215610e7b57600080fd5b610c0382610e4d565b600060208284031215610e9657600080fd5b5035919050565b60008060408385031215610eb057600080fd5b610eb983610e4d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610f0057610f00610ec7565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2f57610f2f610ec7565b604052919050565b60006020808385031215610f4a57600080fd5b823567ffffffffffffffff80821115610f6257600080fd5b818501915085601f830112610f7657600080fd5b813581811115610f8857610f88610ec7565b610f96848260051b01610f06565b818152848101925060a0918202840185019188831115610fb557600080fd5b938501935b8285101561101a5780858a031215610fd25760008081fd5b610fda610edd565b610fe386610e4d565b8152858701358782015260408087013590820152606080870135908201526080808701359082015284529384019392850192610fba565b50979650505050505050565b6000806040838503121561103957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156110895783516001600160a01b031683529284019291840191600101611064565b50909695505050505050565b600080600080600060a086880312156110ad57600080fd5b6110b686610e4d565b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156110e957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b2157610b216110f0565b81810381811115610b2157610b216110f0565b8082028115828204841417610b2157610b216110f0565b60008261116057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561117757600080fd5b81518015158114610c0357600080fd5b600060018201611199576111996110f0565b5060010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212208a60bbae3b2a5c5fc27e0a56c4bf149711b0ecfdf0876fbf19c6156129a6dcfb64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063a604b44e11610097578063f275684d11610066578063f275684d14610247578063f2fde38b1461025a578063f458b5e61461026d578063f6d78b651461028d57600080fd5b8063a604b44e1461019f578063b9fea7d0146101a7578063bf1e799b146101ba578063ccc9305d1461023457600080fd5b8063379607f5116100d3578063379607f5146101695780634958e1a11461017e578063715018a6146101865780638da5cb5b1461018e57600080fd5b806303f7a68c1461010557806306def802146101205780630a463e1c1461013357806310fe9ae814610158575b600080fd5b61010d6102a0565b6040519081526020015b60405180910390f35b61010d61012e366004610e69565b610320565b6002546001600160a01b03165b6040516001600160a01b039091168152602001610117565b6001546001600160a01b0316610140565b61017c610177366004610e84565b61044b565b005b61010d610661565b61017c61066d565b6000546001600160a01b0316610140565b61010d610681565b61017c6101b5366004610e69565b6106e7565b6101cd6101c8366004610e69565b610747565b604051610117919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0828101519082015260c0808301519082015260e0918201511515918101919091526101000190565b61017c610242366004610e9d565b610817565b61017c610255366004610f37565b6108cb565b61017c610268366004610e69565b6109b5565b61028061027b366004611026565b610a2e565b6040516101179190611048565b61017c61029b366004611095565b610b27565b600154600254604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e90604401602060405180830381865afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b91906110d7565b905090565b6001600160a01b038116600090815260056020526040812060048101546003820154839161034d91611106565b9050428181101561036357506000949350505050565b600783015460009060ff161561039c5782846006015411610385576000610395565b8284600601546103959190611119565b90506103cf565b60008460050154846103ae9190611106565b90508083106103c15784600501546103cb565b6103cb8484611119565b9150505b600084600501548286600101546103e6919061112c565b6103f09190611143565b9050600085600201548211610406576000610415565b60028601546104159083611119565b600787015490915060ff168015610430575085600601548410155b1561044057979650505050505050565b979650505050505050565b336000818152600560205260409020546001600160a01b0316146104825760405163502ffa3f60e11b815260040160405180910390fd5b806000036104a3576040516360640efd60e11b815260040160405180910390fd5b3360009081526005602052604090206004810154600382015442916104c791611106565b81101561050a5780826004015483600301546104e39190611106565b6040516367f2a6c360e11b8152600481019290925260248201526044015b60405180910390fd5b600061051533610320565b9050808411156105425760405163271fb30560e21b81526004810185905260248101829052604401610501565b838360020160008282546105569190611106565b90915550506001546002546001600160a01b03918216916323b872dd9116336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018790526064016020604051808303816000875af11580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190611165565b6106265760025460405163190eecf360e31b81526001600160a01b03909116600482015233602482015260448101859052606401610501565b60405184815233907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309060200160405180910390a250505050565b600061031b6003610b43565b610675610b4d565b61067f6000610ba7565b565b600080805b6106906003610b43565b8110156106e157600560006106a6600384610bf7565b6001600160a01b031681526020810191909152604001600020600101546106cd9083611106565b9150806106d981611187565b915050610686565b50919050565b6106ef610b4d565b6001600160a01b03811660008181526005602052604080822060078101805460ff191690556006810183905590519092917f6f64e2246d8a5cd8d55ea99199b39ac605693722f899ac2405b7c54bae3eda7e91a25050565b61079a60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b0390811660009081526005602081815260409283902083516101008101855281549095168552600181015491850191909152600281015492840192909252600382015460608401526004820154608084015281015460a0830152600681015460c08301526007015460ff16151560e082015290565b61081f610b4d565b6001600160a01b03821660009081526005602052604090206003810154821161086b5760038101546040516349d7e3e960e01b8152610501918491600401918252602082015260400190565b6006810182905560078101805460ff191660011790556040516001600160a01b038416907f96a3db8ae0226bd6c5e331039c8dc9bad983d211de42680d9775dfbddb1b71a9906108be9085815260200190565b60405180910390a2505050565b6108d3610b4d565b80516000036108f55760405163d77fbd1d60e01b815260040160405180910390fd5b60005b81518110156109b15761099f828281518110610916576109166111a0565b602002602001015160000151838381518110610934576109346111a0565b602002602001015160200151848481518110610952576109526111a0565b602002602001015160400151858581518110610970576109706111a0565b60200260200101516060015186868151811061098e5761098e6111a0565b602002602001015160800151610c0a565b806109a981611187565b9150506108f8565b5050565b6109bd610b4d565b6001600160a01b038116610a225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610501565b610a2b81610ba7565b50565b60606000610a3c6003610b43565b9050808410610a5b575050604080516000815260208101909152610b21565b80610a668486611106565b1115610a7957610a768482611119565b92505b60008367ffffffffffffffff811115610a9457610a94610ec7565b604051908082528060200260200182016040528015610abd578160200160208202803683370190505b50905060005b84811015610b1c57610ae0610ad88288611106565b600390610bf7565b828281518110610af257610af26111a0565b6001600160a01b039092166020928302919091019091015280610b1481611187565b915050610ac3565b509150505b92915050565b610b2f610b4d565b610b3c8585858585610c0a565b5050505050565b6000610b21825490565b6000546001600160a01b0316331461067f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610501565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610c038383610da2565b9392505050565b610c12610b4d565b6001600160a01b038516610c395760405163502ffa3f60e11b815260040160405180910390fd5b83600003610c5a576040516307e7e9a960e21b815260040160405180910390fd5b610c65600386610dcc565b15610c8d57604051620118fb60e11b81526001600160a01b0386166004820152602401610501565b60408051610100810182526001600160a01b0387811680835260208084018981526000858701818152606087018b8152608088018b815260a089018b815260c08a0185815260e08b018681529886526005978890529a909420985189546001600160a01b03191698169790971788559251600188015551600287015590516003808701919091559351600486015551908401559251600683015591516007909101805460ff1916911515919091179055610d479086610dee565b506040805185815260208101859052908101839052606081018290526001600160a01b038616907f9f7f47e73fd629c582be438a08553de4dc70f4b96c2735ad7ff9ec4314096e859060800160405180910390a25050505050565b6000826000018281548110610db957610db96111a0565b9060005260206000200154905092915050565b6001600160a01b03811660009081526001830160205260408120541515610c03565b6000610c03836001600160a01b0384166000818152600183016020526040812054610e4557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b21565b506000610b21565b80356001600160a01b0381168114610e6457600080fd5b919050565b600060208284031215610e7b57600080fd5b610c0382610e4d565b600060208284031215610e9657600080fd5b5035919050565b60008060408385031215610eb057600080fd5b610eb983610e4d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610f0057610f00610ec7565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2f57610f2f610ec7565b604052919050565b60006020808385031215610f4a57600080fd5b823567ffffffffffffffff80821115610f6257600080fd5b818501915085601f830112610f7657600080fd5b813581811115610f8857610f88610ec7565b610f96848260051b01610f06565b818152848101925060a0918202840185019188831115610fb557600080fd5b938501935b8285101561101a5780858a031215610fd25760008081fd5b610fda610edd565b610fe386610e4d565b8152858701358782015260408087013590820152606080870135908201526080808701359082015284529384019392850192610fba565b50979650505050505050565b6000806040838503121561103957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156110895783516001600160a01b031683529284019291840191600101611064565b50909695505050505050565b600080600080600060a086880312156110ad57600080fd5b6110b686610e4d565b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156110e957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b2157610b216110f0565b81810381811115610b2157610b216110f0565b8082028115828204841417610b2157610b216110f0565b60008261116057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561117757600080fd5b81518015158114610c0357600080fd5b600060018201611199576111996110f0565b5060010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212208a60bbae3b2a5c5fc27e0a56c4bf149711b0ecfdf0876fbf19c6156129a6dcfb64736f6c63430008130033",
  "devdoc": {
    "errors": {
      "AmountExceedsWithdrawableAllowance(uint256,uint256)": [
        {
          "params": {
            "amount": "Amount of tokens to be claimed.",
            "claimable": "Amount of tokens that can be claimed."
          }
        }
      ],
      "ReceiverAlreadyHasATimelock(address)": [
        {
          "params": {
            "receiver": "Address of the receiver."
          }
        }
      ],
      "TerminationTimeMustBeAfterLockStart(uint256,uint256)": [
        {
          "params": {
            "lockFrom": "Timestamp from which tokens will be locked.",
            "terminationFrom": "Timestamp from which tokens will be terminated."
          }
        }
      ],
      "TokenTransferFailed(address,address,uint256)": [
        {
          "params": {
            "amount": "Amount of tokens transferred.",
            "receiver": "Address of the receiver.",
            "tokenPool": "Address of the token pool."
          }
        }
      ]
    },
    "events": {
      "TimelockCreated(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "cliffDuration": "Cliff time in seconds (6 months default).",
          "receiver": "Address of the receiver.",
          "totalAmount": "Total amount of tokens to be vested.",
          "vestingDuration": "Vesting duration in seconds (18/24 months)."
        }
      },
      "TimelockDeterminated(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "TimelockTerminated(address,uint256)": {
        "params": {
          "receiver": "Address of the receiver.",
          "terminationFrom": "Timestamp from which tokens will be terminated."
        }
      },
      "TokensClaimed(address,uint256)": {
        "params": {
          "amount": "Amount of tokens claimed.",
          "receiver": "Address of the claimer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addTimelock(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "cliffDuration": "Cliff time in seconds (6 months default).",
          "receiver": "Address of the receiver.",
          "timelockFrom": "Timestamp from which the timelock will start.",
          "totalAmount": "Total amount of tokens to be vested.",
          "vestingDuration": "Vesting duration in seconds (18/24 months)."
        }
      },
      "addTimelockBatch((address,uint256,uint256,uint256,uint256)[])": {
        "params": {
          "receivers": "Array of receivers."
        }
      },
      "claim(uint256)": {
        "params": {
          "amount": "Amount of tokens to be claimed."
        }
      },
      "determinate(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "getClaimableBalance(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "getTimelock(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "getTimelockReceivers(uint256,uint256)": {
        "params": {
          "limit": "Limit of receivers to be returned.",
          "offset": "Offset from which receivers will be returned."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "terminate(address,uint256)": {
        "params": {
          "receiver": "Address of the receiver.",
          "terminationFrom": "Timestamp from which tokens will be terminated."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_token": {
        "details": "Link to IQT repository: https://github.com/iqlabsorg/iqt-eth"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AmountExceedsWithdrawableAllowance(uint256,uint256)": [
        {
          "notice": "Reverts if amount exceeds vesting allowance."
        }
      ],
      "CliffPeriodNotEnded(uint256,uint256)": [
        {
          "notice": "Reverts if cliff period has not ended."
        }
      ],
      "EmptyReceiversArray()": [
        {
          "notice": "Reverts if empty receivers array is passed."
        }
      ],
      "InvalidReceiverAddress()": [
        {
          "notice": "Reverts if invalid receiver address is passed."
        }
      ],
      "InvalidTimelockAmount()": [
        {
          "notice": "Reverts if invalid timelock amount is passed."
        }
      ],
      "ReceiverAlreadyHasATimelock(address)": [
        {
          "notice": "Reverts if receiver already has a timelock."
        }
      ],
      "TerminationTimeMustBeAfterLockStart(uint256,uint256)": [
        {
          "notice": "Reverts if termination time is before lock start."
        }
      ],
      "TokenTransferFailed(address,address,uint256)": [
        {
          "notice": "Reverts if token transfer failed."
        }
      ],
      "ZeroAllocation()": [
        {
          "notice": "Reverts if vesting period has not started."
        }
      ],
      "ZeroClaimAmount()": [
        {
          "notice": "Reverts if zero claim amount is passed."
        }
      ]
    },
    "events": {
      "TimelockCreated(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emits when timelock is created."
      },
      "TimelockDeterminated(address)": {
        "notice": "Emits when timelock is determinated."
      },
      "TimelockTerminated(address,uint256)": {
        "notice": "Emits when timelock is terminated."
      },
      "TokensClaimed(address,uint256)": {
        "notice": "Emits when tokens are claimed."
      }
    },
    "kind": "user",
    "methods": {
      "addTimelock(address,uint256,uint256,uint256,uint256)": {
        "notice": "Creates timelock for token receiver."
      },
      "addTimelockBatch((address,uint256,uint256,uint256,uint256)[])": {
        "notice": "Creates timelock for token receivers in a batch mode."
      },
      "claim(uint256)": {
        "notice": "Claims tokens for the receiver."
      },
      "constructor": {
        "notice": "Reverts if the timelock does not exist."
      },
      "determinate(address)": {
        "notice": "Determinates timelock for the receiver."
      },
      "getClaimableBalance(address)": {
        "notice": "Returns the amount of tokens that are currently allowed for claim."
      },
      "getCurrentAllowance()": {
        "notice": "Returns the amount of tokens that are currently allowed for transfer."
      },
      "getTimelock(address)": {
        "notice": "Returns the timelock data."
      },
      "getTimelockReceivers(uint256,uint256)": {
        "notice": "Returns the array of timelock receivers."
      },
      "getTimelockReceiversAmount()": {
        "notice": "Returns the amount of timelock receivers."
      },
      "getTokenAddress()": {
        "notice": "Returns the address of token."
      },
      "getTotalTokensLocked()": {
        "notice": "Returns the amount of tokens that are currently locked."
      },
      "getVestingPoolAddress()": {
        "notice": "Returns the address of vesting pool."
      },
      "terminate(address,uint256)": {
        "notice": "Terminates timelock for the receiver."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 849,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 852,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_vestingPool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 856,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_allReceivers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)538_storage"
      },
      {
        "astId": 862,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_timelocks",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Timelock)1588_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Timelock)1588_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBatchTimelock.Timelock)",
        "numberOfBytes": "32",
        "value": "t_struct(Timelock)1588_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)538_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 537,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)223_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)223_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 218,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 222,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Timelock)1588_storage": {
        "encoding": "inplace",
        "label": "struct IBatchTimelock.Timelock",
        "members": [
          {
            "astId": 1573,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1575,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1577,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "releasedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1579,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "timelockFrom",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1581,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "cliffDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1583,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1585,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "terminationFrom",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1587,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "isTerminated",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}