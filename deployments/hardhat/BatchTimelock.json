{
  "address": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vestingPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        }
      ],
      "name": "AmountExceedsWithdrawableAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerIsNotATerminationAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerIsNotATimelockCreator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeNow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffEndsAt",
          "type": "uint256"
        }
      ],
      "name": "CliffPeriodNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyReceiversArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTimelockAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ReceiverAlreadyHasATimelock",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "terminationFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockFrom",
          "type": "uint256"
        }
      ],
      "name": "TerminationTimeMustBeAfterLockStart",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAllocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroClaimAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelockFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliffDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        }
      ],
      "name": "TimelockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "TimelockDeterminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "terminationFrom",
          "type": "uint256"
        }
      ],
      "name": "TimelockTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelockFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        }
      ],
      "name": "addTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timelockFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBatchTimelock.Receiver[]",
          "name": "receivers",
          "type": "tuple[]"
        }
      ],
      "name": "addTimelockBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "determinate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getClaimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getTimelock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timelockFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationFrom",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTerminated",
              "type": "bool"
            }
          ],
          "internalType": "struct IBatchTimelock.Timelock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getTimelockReceivers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimelockReceiversAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokensLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "terminationFrom",
          "type": "uint256"
        }
      ],
      "name": "terminate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03152dd730beea1a166a840ed5927362caf849e4afd071abcd2c846bd4c9a9b0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
    "transactionIndex": 0,
    "gasUsed": "1500500",
    "logsBloom": "0x
    "blockHash": "0x9cb36d7d8663ecaadb0a7dbf5db1c129be9f9f197fdbbb4c335b5ceaa160d993",
    "transactionHash": "0x03152dd730beea1a166a840ed5927362caf849e4afd071abcd2c846bd4c9a9b0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 228,
        "transactionHash": "0x03152dd730beea1a166a840ed5927362caf849e4afd071abcd2c846bd4c9a9b0",
        "address": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9cb36d7d8663ecaadb0a7dbf5db1c129be9f9f197fdbbb4c335b5ceaa160d993"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 228,
        "transactionHash": "0x03152dd730beea1a166a840ed5927362caf849e4afd071abcd2c846bd4c9a9b0",
        "address": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x654cf90216eecc7de4eb1e1f3b7b3cf7e630c873f6cf3ff18753f0093c958207",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9cb36d7d8663ecaadb0a7dbf5db1c129be9f9f197fdbbb4c335b5ceaa160d993"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 228,
        "transactionHash": "0x03152dd730beea1a166a840ed5927362caf849e4afd071abcd2c846bd4c9a9b0",
        "address": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9cb36d7d8663ecaadb0a7dbf5db1c129be9f9f197fdbbb4c335b5ceaa160d993"
      }
    ],
    "blockNumber": 228,
    "cumulativeGasUsed": "1500500",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe1Fd27F4390DcBE165f4D60DBF821e4B9Bb02dEd",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "fca8a5c9a382b425fa17378b61db9fe4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vestingPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"name\":\"AmountExceedsWithdrawableAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotATerminationAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotATimelockCreator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffEndsAt\",\"type\":\"uint256\"}],\"name\":\"CliffPeriodNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyReceiversArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimelockAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ReceiverAlreadyHasATimelock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFrom\",\"type\":\"uint256\"}],\"name\":\"TerminationTimeMustBeAfterLockStart\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroClaimAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"name\":\"TimelockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TimelockDeterminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"}],\"name\":\"TimelockTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"name\":\"addTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct IBatchTimelock.Receiver[]\",\"name\":\"receivers\",\"type\":\"tuple[]\"}],\"name\":\"addTimelockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"determinate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getClaimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getTimelock\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTerminated\",\"type\":\"bool\"}],\"internalType\":\"struct IBatchTimelock.Timelock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getTimelockReceivers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelockReceiversAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"terminationFrom\",\"type\":\"uint256\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AmountExceedsWithdrawableAllowance(uint256,uint256)\":[{\"params\":{\"amount\":\"Amount of tokens to be claimed.\",\"claimable\":\"Amount of tokens that can be claimed.\"}}],\"CallerIsNotATerminationAdmin()\":[{\"details\":\"Reverts if the caller is not a termination admin.\"}],\"CallerIsNotATimelockCreator()\":[{\"details\":\"Reverts if the caller is not the timelock creator.\"}],\"ReceiverAlreadyHasATimelock(address)\":[{\"params\":{\"receiver\":\"Address of the receiver.\"}}],\"TerminationTimeMustBeAfterLockStart(uint256,uint256)\":[{\"params\":{\"lockFrom\":\"Timestamp from which tokens will be locked.\",\"terminationFrom\":\"Timestamp from which tokens will be terminated.\"}}],\"TokenTransferFailed(address,address,uint256)\":[{\"params\":{\"amount\":\"Amount of tokens transferred.\",\"receiver\":\"Address of the receiver.\",\"tokenPool\":\"Address of the token pool.\"}}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TimelockCreated(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"cliffDuration\":\"Cliff time in seconds (6 months default).\",\"receiver\":\"Address of the receiver.\",\"totalAmount\":\"Total amount of tokens to be vested.\",\"vestingDuration\":\"Vesting duration in seconds (18/24 months).\"}},\"TimelockDeterminated(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"TimelockTerminated(address,uint256)\":{\"params\":{\"receiver\":\"Address of the receiver.\",\"terminationFrom\":\"Timestamp from which tokens will be terminated.\"}},\"TokensClaimed(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens claimed.\",\"receiver\":\"Address of the claimer.\"}}},\"kind\":\"dev\",\"methods\":{\"addTimelock(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"cliffDuration\":\"Cliff time in seconds (6 months default).\",\"receiver\":\"Address of the receiver.\",\"timelockFrom\":\"Timestamp from which the timelock will start.\",\"totalAmount\":\"Total amount of tokens to be vested.\",\"vestingDuration\":\"Vesting duration in seconds (18/24 months).\"}},\"addTimelockBatch((address,uint256,uint256,uint256,uint256)[])\":{\"params\":{\"receivers\":\"Array of receivers.\"}},\"claim(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to be claimed.\"}},\"determinate(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"getClaimableBalance(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTimelock(address)\":{\"params\":{\"receiver\":\"Address of the receiver.\"}},\"getTimelockReceivers(uint256,uint256)\":{\"params\":{\"limit\":\"Limit of receivers to be returned.\",\"offset\":\"Offset from which receivers will be returned.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"terminate(address,uint256)\":{\"params\":{\"receiver\":\"Address of the receiver.\",\"terminationFrom\":\"Timestamp from which tokens will be terminated.\"}}},\"stateVariables\":{\"_token\":{\"details\":\"Link to IQT repository: https://github.com/iqlabsorg/iqt-eth\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountExceedsWithdrawableAllowance(uint256,uint256)\":[{\"notice\":\"Reverts if amount exceeds vesting allowance.\"}],\"CliffPeriodNotEnded(uint256,uint256)\":[{\"notice\":\"Reverts if cliff period has not ended.\"}],\"EmptyReceiversArray()\":[{\"notice\":\"Reverts if empty receivers array is passed.\"}],\"InvalidReceiverAddress()\":[{\"notice\":\"Reverts if invalid receiver address is passed.\"}],\"InvalidTimelockAmount()\":[{\"notice\":\"Reverts if invalid timelock amount is passed.\"}],\"ReceiverAlreadyHasATimelock(address)\":[{\"notice\":\"Reverts if receiver already has a timelock.\"}],\"TerminationTimeMustBeAfterLockStart(uint256,uint256)\":[{\"notice\":\"Reverts if termination time is before lock start.\"}],\"TokenTransferFailed(address,address,uint256)\":[{\"notice\":\"Reverts if token transfer failed.\"}],\"ZeroAllocation()\":[{\"notice\":\"Reverts if vesting period has not started.\"}],\"ZeroClaimAmount()\":[{\"notice\":\"Reverts if zero claim amount is passed.\"}]},\"events\":{\"TimelockCreated(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emits when timelock is created.\"},\"TimelockDeterminated(address)\":{\"notice\":\"Emits when timelock is determinated.\"},\"TimelockTerminated(address,uint256)\":{\"notice\":\"Emits when timelock is terminated.\"},\"TokensClaimed(address,uint256)\":{\"notice\":\"Emits when tokens are claimed.\"}},\"kind\":\"user\",\"methods\":{\"addTimelock(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Creates timelock for token receiver.\"},\"addTimelockBatch((address,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Creates timelock for token receivers in a batch mode.\"},\"claim(uint256)\":{\"notice\":\"Claims tokens for the receiver.\"},\"constructor\":{\"notice\":\"Reverts if the timelock does not exist.\"},\"determinate(address)\":{\"notice\":\"Determinates timelock for the receiver.\"},\"getClaimableBalance(address)\":{\"notice\":\"Returns the amount of tokens that are currently allowed for claim.\"},\"getCurrentAllowance()\":{\"notice\":\"Returns the amount of tokens that are currently allowed for transfer.\"},\"getTimelock(address)\":{\"notice\":\"Returns the timelock data.\"},\"getTimelockReceivers(uint256,uint256)\":{\"notice\":\"Returns the array of timelock receivers.\"},\"getTimelockReceiversAmount()\":{\"notice\":\"Returns the amount of timelock receivers.\"},\"getTokenAddress()\":{\"notice\":\"Returns the address of token.\"},\"getTotalTokensLocked()\":{\"notice\":\"Returns the amount of tokens that are currently locked.\"},\"getVestingPoolAddress()\":{\"notice\":\"Returns the address of vesting pool.\"},\"terminate(address,uint256)\":{\"notice\":\"Terminates timelock for the receiver.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/timelock/BatchTimelock.sol\":\"BatchTimelock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/library/TimelockRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary TimelockRoles {\\n  bytes32 public constant TERMINATION_ADMIN_ROLE = keccak256(\\\"TERMINATION_ADMIN\\\");\\n  bytes32 public constant TIMELOCK_CREATOR_ROLE = keccak256(\\\"TIMELOCK_CREATOR\\\");\\n}\",\"keccak256\":\"0x04c57830c1483f67d25bf503cab124f0d87d21ca76cc8540dea997229e0675d3\",\"license\":\"MIT\"},\"contracts/timelock/BatchTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {TimelockRoles} from \\\"../library/TimelockRoles.sol\\\";\\nimport \\\"./ITerminateable.sol\\\";\\nimport \\\"./IBatchTimelock.sol\\\";\\nimport \\\"./IVestingPool.sol\\\";\\n\\ncontract BatchTimelock is ITerminateable, IBatchTimelock, IVestingPool, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Token that will be vested (IQT).\\n     * @dev Link to IQT repository: https://github.com/iqlabsorg/iqt-eth\\n     */\\n    IERC20 internal _token;\\n\\n    /**\\n     * @notice Address of the vesting pool.\\n     */\\n    address internal _vestingPool;\\n\\n    /**\\n     * @notice Array of all receiver addresses.\\n     */\\n    EnumerableSet.AddressSet internal _allReceivers;\\n\\n    /**\\n     * @notice Mapping of all timelocks.\\n     */\\n    mapping(address => Timelock) internal _timelocks;\\n\\n    /**\\n     * @notice Checks if the timelock exists\\n     */\\n    modifier onlyReceiver() {\\n        if (_timelocks[_msgSender()].receiver != _msgSender()) {\\n            revert InvalidReceiverAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTimelockCreator() {\\n        if (!hasRole(TimelockRoles.TIMELOCK_CREATOR_ROLE, _msgSender()) && !hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            revert CallerIsNotATimelockCreator();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTerminationAdmin() {\\n        if (!hasRole(TimelockRoles.TERMINATION_ADMIN_ROLE, _msgSender()) && !hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            revert CallerIsNotATerminationAdmin();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the timelock does not exist.\\n    */\\n    constructor(IERC20 token, address vestingPool) {\\n        _token = token;\\n        _vestingPool = vestingPool;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(TimelockRoles.TERMINATION_ADMIN_ROLE, _msgSender());\\n        _setupRole(TimelockRoles.TIMELOCK_CREATOR_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @inheritdoc ITerminateable\\n     */\\n    function terminate(address receiver, uint256 terminationFrom) external onlyTerminationAdmin {\\n        Timelock storage lock = _timelocks[receiver];\\n\\n        if (lock.timelockFrom >= terminationFrom) {\\n            revert TerminationTimeMustBeAfterLockStart(terminationFrom, lock.timelockFrom);\\n        }\\n\\n        lock.terminationFrom = terminationFrom;\\n        lock.isTerminated = true;\\n\\n        emit TimelockTerminated(receiver, terminationFrom);\\n    }\\n\\n    /**\\n     * @inheritdoc ITerminateable\\n     */\\n    function determinate(address receiver) external onlyTerminationAdmin {\\n        Timelock storage lock = _timelocks[receiver];\\n        lock.isTerminated = false;\\n        lock.terminationFrom = 0;\\n\\n        emit TimelockDeterminated(receiver);\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function addTimelockBatch(Receiver[] memory receivers) external onlyTimelockCreator {\\n        if (receivers.length == 0) {\\n            revert EmptyReceiversArray();\\n        }\\n\\n        uint256 receiversCount = receivers.length; // Caching the array length outside a loop\\n        unchecked {\\n            for (uint256 i = 0; i < receiversCount; ++i) {\\n                _addTimelock(\\n                    receivers[i].receiver,\\n                    receivers[i].totalAmount,\\n                    receivers[i].timelockFrom,\\n                    receivers[i].cliffDuration,\\n                    receivers[i].vestingDuration\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function addTimelock(\\n        address receiver,\\n        uint256 totalAmount,\\n        uint256 timelockFrom,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration\\n    ) external onlyTimelockCreator {\\n        _addTimelock(receiver, totalAmount, timelockFrom, cliffDuration, vestingDuration);\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n     */\\n    function claim(uint256 amount) external onlyReceiver {\\n        if (amount == 0) {\\n            revert ZeroClaimAmount();\\n        }\\n\\n        Timelock storage lock = _timelocks[_msgSender()];\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        if (blockTimestamp < lock.timelockFrom + lock.cliffDuration) {\\n            revert CliffPeriodNotEnded(blockTimestamp, lock.timelockFrom + lock.cliffDuration);\\n        }\\n\\n        uint256 withdrawable = getClaimableBalance(_msgSender());\\n\\n        if (amount > withdrawable) {\\n            revert AmountExceedsWithdrawableAllowance(amount, withdrawable);\\n        }\\n\\n        lock.releasedAmount += amount;\\n\\n        _token.transferFrom(_vestingPool, _msgSender(), amount);\\n\\n        emit TokensClaimed(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n     */\\n    function getClaimableBalance(address receiver) public view returns (uint256) {\\n        Timelock storage lock = _timelocks[receiver];\\n        uint256 lockFromPlusCliff = lock.timelockFrom + lock.cliffDuration;\\n        uint256 blockTimestampNow = block.timestamp;\\n\\n        if (blockTimestampNow < lockFromPlusCliff) {\\n            return 0;\\n        }\\n\\n        uint256 vestedTime;\\n        if (lock.isTerminated) {\\n            vestedTime = lock.terminationFrom > lockFromPlusCliff\\n                ? lock.terminationFrom - lockFromPlusCliff\\n                : 0;\\n        } else {\\n            uint256 vestingEnd = lockFromPlusCliff + lock.vestingDuration;\\n            vestedTime = blockTimestampNow < vestingEnd\\n                ? blockTimestampNow - lockFromPlusCliff\\n                : lock.vestingDuration;\\n        }\\n        uint256 vestedPortion = (lock.totalAmount * vestedTime) / lock.vestingDuration;\\n\\n        uint256 claimable = vestedPortion > lock.releasedAmount\\n            ? vestedPortion - lock.releasedAmount\\n            : 0;\\n\\n        if (lock.isTerminated && blockTimestampNow >= lock.terminationFrom) {\\n            return claimable;\\n        }\\n\\n        return claimable;\\n    }\\n\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function getTimelock(address receiver) public view returns (Timelock memory) {\\n        return _timelocks[receiver];\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory) {\\n        uint256 receiverCount = _allReceivers.length();\\n        if (offset >= receiverCount) {\\n            return new address[](0);\\n        }\\n\\n        if (offset + limit > receiverCount) {\\n            limit = receiverCount - offset;\\n        }\\n\\n        address[] memory receivers = new address[](limit);\\n        unchecked {\\n            for (uint256 i = 0; i < limit; ++i) {\\n                receivers[i] = _allReceivers.at(offset + i);\\n            }\\n        }\\n        return receivers;\\n    }\\n\\n    /**\\n     * @inheritdoc IBatchTimelock\\n    */\\n    function getTimelockReceiversAmount() external view returns (uint256) {\\n        return _allReceivers.length();\\n   }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getCurrentAllowance() public view returns (uint256) {\\n        return _token.allowance(_vestingPool, address(this));\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getTotalTokensLocked() public view returns (uint256) {\\n        uint256 total = 0;\\n        uint256 receiverCount = _allReceivers.length(); // Caching the array length outside a loop\\n        unchecked {\\n            for (uint256 i = 0; i < receiverCount; ++i) {\\n                total += _timelocks[_allReceivers.at(i)].totalAmount;\\n            }\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getVestingPoolAddress() public view returns (address) {\\n        return _vestingPool;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingPool\\n     */\\n    function getTokenAddress() public view returns (address) {\\n        return address(_token);\\n    }\\n\\n    /**\\n     * @notice Creates new timelock for the receiver.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param timelockFrom Timestamp from which the timelock will start.\\n     * @param cliffDuration Cliff time in seconds (6 months default).\\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\\n    */\\n    function _addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) internal onlyTimelockCreator {\\n        if (receiver == address(0)) revert InvalidReceiverAddress();\\n        if (totalAmount == 0) revert InvalidTimelockAmount();\\n        if (_allReceivers.contains(receiver)) revert ReceiverAlreadyHasATimelock(receiver);\\n\\n        _timelocks[receiver] = Timelock({\\n            receiver: receiver,\\n            totalAmount: totalAmount,\\n            releasedAmount: 0,\\n            timelockFrom: timelockFrom,\\n            cliffDuration: cliffDuration,\\n            vestingDuration: vestingDuration,\\n            isTerminated: false,\\n            terminationFrom: 0\\n        });\\n        _allReceivers.add(receiver);\\n\\n        emit TimelockCreated(receiver, totalAmount, timelockFrom, cliffDuration, vestingDuration);\\n    }\\n}\",\"keccak256\":\"0x46d9fc6a8bde71a5a7030e0cbb8ca8097cfc4509e70b12a69d8bdc6c36088d4f\",\"license\":\"MIT\"},\"contracts/timelock/IBatchTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IBatchTimelock {\\n    /**\\n     * @notice Reverts if amount exceeds vesting allowance.\\n     * @param amount Amount of tokens to be claimed.\\n     * @param claimable Amount of tokens that can be claimed.\\n     */\\n    error AmountExceedsWithdrawableAllowance(uint256 amount, uint256 claimable);\\n\\n    /**\\n     * @notice Reverts if cliff period has not ended.\\n     */\\n    error CliffPeriodNotEnded(uint256 timeNow, uint256 cliffEndsAt);\\n\\n    /**\\n     * @notice Reverts if vesting period has not started.\\n     */\\n    error ZeroAllocation();\\n\\n    /**\\n     * @notice Reverts if empty receivers array is passed.\\n     */\\n    error EmptyReceiversArray();\\n\\n    /**\\n     * @notice Reverts if invalid receiver address is passed.\\n     */\\n    error InvalidReceiverAddress();\\n\\n    /**\\n     * @notice Reverts if invalid timelock amount is passed.\\n     */\\n    error InvalidTimelockAmount();\\n\\n    /**\\n     * @notice Reverts if receiver already has a timelock.\\n     * @param receiver Address of the receiver.\\n     */\\n    error ReceiverAlreadyHasATimelock(address receiver);\\n\\n    /**\\n     * @notice Reverts if zero claim amount is passed.\\n    */\\n    error ZeroClaimAmount();\\n\\n    /**\\n     * @notice Reverts if token transfer failed.\\n     * @param tokenPool Address of the token pool.\\n     * @param receiver Address of the receiver.\\n     * @param amount Amount of tokens transferred.\\n    */\\n    error TokenTransferFailed(address tokenPool, address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Reverts if the caller is not a termination admin.\\n     */\\n    error CallerIsNotATerminationAdmin();\\n\\n    /**\\n     * @dev Reverts if the caller is not the timelock creator.\\n     */\\n    error CallerIsNotATimelockCreator();\\n\\n    /**\\n     * @notice Token receiver struct that is used for adding _timelocks for timelock.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param timelockFrom Timestamp from which the timelock will start.\\n     * @param cliffDuration Cliff time in months (6 months default).\\n     * @param vestingDuration Vesting duration in months (18/24 months).\\n     */\\n    struct Receiver {\\n        address receiver;\\n        uint256 totalAmount;\\n        uint256 timelockFrom;\\n        uint256 cliffDuration;\\n        uint256 vestingDuration;\\n    }\\n\\n    /**\\n     * @notice Timelock struct that is used for vesting.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param releasedAmount Amount of tokens released.\\n     * @param lockFrom Timestamp from which tokens will start to vest.\\n     * @param cliffDuration Cliff time in months (6 months default).\\n     * @param vestingDuration Vesting duration in months (18/24 months).\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     * @param isTerminated Flag that indicates if timelock is terminated.\\n     */\\n    struct Timelock {\\n        address receiver;\\n        uint256 totalAmount;\\n        uint256 releasedAmount;\\n        uint256 timelockFrom;\\n        uint256 cliffDuration;\\n        uint256 vestingDuration;\\n        uint256 terminationFrom;\\n        bool isTerminated;\\n    }\\n\\n    /**\\n     * @notice Emits when timelock is created.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param cliffDuration Cliff time in seconds (6 months default).\\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\\n     */\\n    event TimelockCreated(address indexed receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration);\\n\\n    /**\\n     * @notice Emits when tokens are claimed.\\n     * @param receiver Address of the claimer.\\n     * @param amount Amount of tokens claimed.\\n     */\\n    event TokensClaimed(address indexed receiver, uint256 amount);\\n\\n    /**\\n     * @notice Creates timelock for token receivers in a batch mode.\\n     * @param receivers Array of receivers.\\n     */\\n    function addTimelockBatch(Receiver[] memory receivers) external;\\n\\n    /**\\n     * @notice Creates timelock for token receiver.\\n     * @param receiver Address of the receiver.\\n     * @param totalAmount Total amount of tokens to be vested.\\n     * @param timelockFrom Timestamp from which the timelock will start.\\n     * @param cliffDuration Cliff time in seconds (6 months default).\\n     * @param vestingDuration Vesting duration in seconds (18/24 months).\\n    */\\n    function addTimelock(address receiver, uint256 totalAmount, uint256 timelockFrom, uint256 cliffDuration, uint256 vestingDuration) external;\\n\\n    /**\\n     * @notice Claims tokens for the receiver.\\n     * @param amount Amount of tokens to be claimed.\\n     */\\n    function claim(uint256 amount) external;\\n\\n    /**\\n     * @notice Returns the timelock data.\\n     * @param receiver Address of the receiver.\\n     */\\n    function getTimelock(address receiver) external view returns (Timelock memory);\\n\\n    /**\\n     * @notice Returns the amount of tokens that are currently allowed for claim.\\n     * @param receiver Address of the receiver.\\n     */\\n    function getClaimableBalance(address receiver) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the array of timelock receivers.\\n     * @param offset Offset from which receivers will be returned.\\n     * @param limit Limit of receivers to be returned.\\n     */\\n    function getTimelockReceivers(uint256 offset, uint256 limit) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the amount of timelock receivers.\\n     */\\n    function getTimelockReceiversAmount() external view returns (uint256);\\n}\",\"keccak256\":\"0xc1afc10b148956bf031804d150ac6bd2c69d83a6071a83b1fdeb0b205187f33a\",\"license\":\"MIT\"},\"contracts/timelock/ITerminateable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ITerminateable {\\n    /**\\n     * @notice Reverts if termination time is before lock start.\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     * @param lockFrom Timestamp from which tokens will be locked.\\n    */\\n    error TerminationTimeMustBeAfterLockStart(uint256 terminationFrom, uint256 lockFrom);\\n\\n    /**\\n     * @notice Emits when timelock is terminated.\\n     * @param receiver Address of the receiver.\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     */\\n    event TimelockTerminated(address indexed receiver, uint256 terminationFrom);\\n\\n    /**\\n     * @notice Emits when timelock is determinated.\\n     * @param receiver Address of the receiver.\\n     */\\n    event TimelockDeterminated(address indexed receiver);\\n\\n    /**\\n     * @notice Terminates timelock for the receiver.\\n     * @param receiver Address of the receiver.\\n     * @param terminationFrom Timestamp from which tokens will be terminated.\\n     */\\n    function terminate(address receiver, uint256 terminationFrom) external;\\n\\n    /**\\n     * @notice Determinates timelock for the receiver.\\n     * @param receiver Address of the receiver.\\n     */\\n    function determinate(address receiver) external;\\n}\",\"keccak256\":\"0xe43c3d6eca24728a9b6795007f1cd99f2b3d39912715a0c6396c20d6bb415200\",\"license\":\"MIT\"},\"contracts/timelock/IVestingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVestingPool {\\n    /**\\n     * @notice Returns the amount of tokens that are currently allowed for transfer.\\n     */\\n    function getCurrentAllowance() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that are currently locked.\\n     */\\n    function getTotalTokensLocked() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of vesting pool.\\n     */\\n    function getVestingPoolAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of token.\\n     */\\n    function getTokenAddress() external view returns (address);\\n}\",\"keccak256\":\"0xac78e174e43794a5e253990f90f4077f2594902eb88a517b271729fee0b670a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019d4380380620019d48339810160408190526200003491620001a1565b600180546001600160a01b038085166001600160a01b0319928316179092556002805492841692909116919091179055620000786000620000723390565b620000d8565b620000a47f654cf90216eecc7de4eb1e1f3b7b3cf7e630c873f6cf3ff18753f0093c95820733620000d8565b620000d07f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b3933620000d8565b5050620001e0565b620000e48282620000e8565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000e4576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001443390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b03811681146200019e57600080fd5b50565b60008060408385031215620001b557600080fd5b8251620001c28162000188565b6020840151909250620001d58162000188565b809150509250929050565b6117e480620001f06000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806391d14854116100ad578063ccc9305d11610071578063ccc9305d146102ce578063d547741f146102e1578063f275684d146102f4578063f458b5e614610307578063f6d78b651461032757600080fd5b806391d148541461021e578063a217fddf14610231578063a604b44e14610239578063b9fea7d014610241578063bf1e799b1461025457600080fd5b8063248a9ca3116100f4578063248a9ca3146101b85780632f2ff15d146101db57806336568abe146101f0578063379607f5146102035780634958e1a11461021657600080fd5b806301ffc9a71461013157806303f7a68c1461015957806306def8021461016f5780630a463e1c1461018257806310fe9ae8146101a7575b600080fd5b61014461013f366004611325565b61033a565b60405190151581526020015b60405180910390f35b610161610371565b604051908152602001610150565b61016161017d36600461136b565b6103f1565b6002546001600160a01b03165b6040516001600160a01b039091168152602001610150565b6001546001600160a01b031661018f565b6101616101c6366004611386565b60009081526020819052604090206001015490565b6101ee6101e936600461139f565b61051c565b005b6101ee6101fe36600461139f565b610546565b6101ee610211366004611386565b6105c9565b6101616107a2565b61014461022c36600461139f565b6107ae565b610161600081565b6101616107d7565b6101ee61024f36600461136b565b610833565b61026761026236600461136b565b6108e8565b604051610150919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0828101519082015260c0808301519082015260e0918201511515918101919091526101000190565b6101ee6102dc3660046113cb565b6109b8565b6101ee6102ef36600461139f565b610ac1565b6101ee610302366004611465565b610ae6565b61031a610315366004611554565b610c18565b6040516101509190611576565b6101ee6103353660046115c3565b610cfd565b60006001600160e01b03198216637965db0b60e01b148061036b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600154600254604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e90604401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190611605565b905090565b6001600160a01b038116600090815260056020526040812060048101546003820154839161041e91611634565b9050428181101561043457506000949350505050565b600783015460009060ff161561046d5782846006015411610456576000610466565b8284600601546104669190611647565b90506104a0565b600084600501548461047f9190611634565b905080831061049257846005015461049c565b61049c8484611647565b9150505b600084600501548286600101546104b7919061165a565b6104c19190611671565b90506000856002015482116104d75760006104e6565b60028601546104e69083611647565b600787015490915060ff168015610501575085600601548410155b1561051157979650505050505050565b979650505050505050565b60008281526020819052604090206001015461053781610d6e565b6105418383610d7b565b505050565b6001600160a01b03811633146105bb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105c58282610dff565b5050565b336000818152600560205260409020546001600160a01b0316146106005760405163502ffa3f60e11b815260040160405180910390fd5b80600003610621576040516360640efd60e11b815260040160405180910390fd5b33600090815260056020526040902060048101546003820154429161064591611634565b8110156106835780826004015483600301546106619190611634565b6040516367f2a6c360e11b8152600481019290925260248201526044016105b2565b600061068e336103f1565b9050808411156106bb5760405163271fb30560e21b815260048101859052602481018290526044016105b2565b838360020160008282546106cf9190611634565b90915550506001546002546001600160a01b03918216916323b872dd9116336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018790526064016020604051808303816000875af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190611693565b5060405184815233907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309060200160405180910390a250505050565b60006103ec6003610e64565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080806107e56003610e64565b905060005b8181101561082b5760056000610801600384610e6e565b6001600160a01b0316815260208101919091526040016000206001908101549390930192016107ea565b509092915050565b61085d7f654cf90216eecc7de4eb1e1f3b7b3cf7e630c873f6cf3ff18753f0093c958207336107ae565b15801561087257506108706000336107ae565b155b156108905760405163662136cd60e11b815260040160405180910390fd5b6001600160a01b03811660008181526005602052604080822060078101805460ff191690556006810183905590519092917f6f64e2246d8a5cd8d55ea99199b39ac605693722f899ac2405b7c54bae3eda7e91a25050565b61093b60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b0390811660009081526005602081815260409283902083516101008101855281549095168552600181015491850191909152600281015492840192909252600382015460608401526004820154608084015281015460a0830152600681015460c08301526007015460ff16151560e082015290565b6109e27f654cf90216eecc7de4eb1e1f3b7b3cf7e630c873f6cf3ff18753f0093c958207336107ae565b1580156109f757506109f56000336107ae565b155b15610a155760405163662136cd60e11b815260040160405180910390fd5b6001600160a01b038216600090815260056020526040902060038101548211610a615760038101546040516349d7e3e960e01b81526105b2918491600401918252602082015260400190565b6006810182905560078101805460ff191660011790556040516001600160a01b038416907f96a3db8ae0226bd6c5e331039c8dc9bad983d211de42680d9775dfbddb1b71a990610ab49085815260200190565b60405180910390a2505050565b600082815260208190526040902060010154610adc81610d6e565b6105418383610dff565b610b107f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39336107ae565b158015610b255750610b236000336107ae565b155b15610b435760405163ce37e7ad60e01b815260040160405180910390fd5b8051600003610b655760405163d77fbd1d60e01b815260040160405180910390fd5b805160005b8181101561054157610c10838281518110610b8757610b876116b5565b602002602001015160000151848381518110610ba557610ba56116b5565b602002602001015160200151858481518110610bc357610bc36116b5565b602002602001015160400151868581518110610be157610be16116b5565b602002602001015160600151878681518110610bff57610bff6116b5565b602002602001015160800151610e81565b600101610b6a565b60606000610c266003610e64565b9050808410610c4557505060408051600081526020810190915261036b565b80610c508486611634565b1115610c6357610c608482611647565b92505b60008367ffffffffffffffff811115610c7e57610c7e6113f5565b604051908082528060200260200182016040528015610ca7578160200160208202803683370190505b50905060005b84811015610cf457610cc26003878301610e6e565b828281518110610cd457610cd46116b5565b6001600160a01b0390921660209283029190910190910152600101610cad565b50949350505050565b610d277f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39336107ae565b158015610d3c5750610d3a6000336107ae565b155b15610d5a5760405163ce37e7ad60e01b815260040160405180910390fd5b610d678585858585610e81565b5050505050565b610d78813361106e565b50565b610d8582826107ae565b6105c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610dbb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e0982826107ae565b156105c5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061036b825490565b6000610e7a83836110c7565b9392505050565b610eab7f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39336107ae565b158015610ec05750610ebe6000336107ae565b155b15610ede5760405163ce37e7ad60e01b815260040160405180910390fd5b6001600160a01b038516610f055760405163502ffa3f60e11b815260040160405180910390fd5b83600003610f26576040516307e7e9a960e21b815260040160405180910390fd5b610f316003866110f1565b15610f5957604051620118fb60e11b81526001600160a01b03861660048201526024016105b2565b60408051610100810182526001600160a01b0387811680835260208084018981526000858701818152606087018b8152608088018b815260a089018b815260c08a0185815260e08b018681529886526005978890529a909420985189546001600160a01b03191698169790971788559251600188015551600287015590516003808701919091559351600486015551908401559251600683015591516007909101805460ff19169115159190911790556110139086611113565b506040805185815260208101859052908101839052606081018290526001600160a01b038616907f9f7f47e73fd629c582be438a08553de4dc70f4b96c2735ad7ff9ec4314096e859060800160405180910390a25050505050565b61107882826107ae565b6105c55761108581611128565b61109083602061113a565b6040516020016110a19291906116ef565b60408051601f198184030181529082905262461bcd60e51b82526105b291600401611764565b60008260000182815481106110de576110de6116b5565b9060005260206000200154905092915050565b6001600160a01b03811660009081526001830160205260408120541515610e7a565b6000610e7a836001600160a01b0384166112d6565b606061036b6001600160a01b03831660145b6060600061114983600261165a565b611154906002611634565b67ffffffffffffffff81111561116c5761116c6113f5565b6040519080825280601f01601f191660200182016040528015611196576020820181803683370190505b509050600360fc1b816000815181106111b1576111b16116b5565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111e0576111e06116b5565b60200101906001600160f81b031916908160001a905350600061120484600261165a565b61120f906001611634565b90505b6001811115611287576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611243576112436116b5565b1a60f81b828281518110611259576112596116b5565b60200101906001600160f81b031916908160001a90535060049490941c9361128081611797565b9050611212565b508315610e7a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105b2565b600081815260018301602052604081205461131d5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561036b565b50600061036b565b60006020828403121561133757600080fd5b81356001600160e01b031981168114610e7a57600080fd5b80356001600160a01b038116811461136657600080fd5b919050565b60006020828403121561137d57600080fd5b610e7a8261134f565b60006020828403121561139857600080fd5b5035919050565b600080604083850312156113b257600080fd5b823591506113c26020840161134f565b90509250929050565b600080604083850312156113de57600080fd5b6113e78361134f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561142e5761142e6113f5565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561145d5761145d6113f5565b604052919050565b6000602080838503121561147857600080fd5b823567ffffffffffffffff8082111561149057600080fd5b818501915085601f8301126114a457600080fd5b8135818111156114b6576114b66113f5565b6114c4848260051b01611434565b818152848101925060a09182028401850191888311156114e357600080fd5b938501935b828510156115485780858a0312156115005760008081fd5b61150861140b565b6115118661134f565b81528587013587820152604080870135908201526060808701359082015260808087013590820152845293840193928501926114e8565b50979650505050505050565b6000806040838503121561156757600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156115b75783516001600160a01b031683529284019291840191600101611592565b50909695505050505050565b600080600080600060a086880312156115db57600080fd5b6115e48661134f565b97602087013597506040870135966060810135965060800135945092505050565b60006020828403121561161757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561036b5761036b61161e565b8181038181111561036b5761036b61161e565b808202811582820484141761036b5761036b61161e565b60008261168e57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156116a557600080fd5b81518015158114610e7a57600080fd5b634e487b7160e01b600052603260045260246000fd5b60005b838110156116e65781810151838201526020016116ce565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516117278160178501602088016116cb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516117588160288401602088016116cb565b01602801949350505050565b60208152600082518060208401526117838160408501602087016116cb565b601f01601f19169190910160400192915050565b6000816117a6576117a661161e565b50600019019056fea2646970667358221220162ff7d608e4172880bd6be667e7becdc97ac24fc44523fa5d29b6b99d029da164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806391d14854116100ad578063ccc9305d11610071578063ccc9305d146102ce578063d547741f146102e1578063f275684d146102f4578063f458b5e614610307578063f6d78b651461032757600080fd5b806391d148541461021e578063a217fddf14610231578063a604b44e14610239578063b9fea7d014610241578063bf1e799b1461025457600080fd5b8063248a9ca3116100f4578063248a9ca3146101b85780632f2ff15d146101db57806336568abe146101f0578063379607f5146102035780634958e1a11461021657600080fd5b806301ffc9a71461013157806303f7a68c1461015957806306def8021461016f5780630a463e1c1461018257806310fe9ae8146101a7575b600080fd5b61014461013f366004611325565b61033a565b60405190151581526020015b60405180910390f35b610161610371565b604051908152602001610150565b61016161017d36600461136b565b6103f1565b6002546001600160a01b03165b6040516001600160a01b039091168152602001610150565b6001546001600160a01b031661018f565b6101616101c6366004611386565b60009081526020819052604090206001015490565b6101ee6101e936600461139f565b61051c565b005b6101ee6101fe36600461139f565b610546565b6101ee610211366004611386565b6105c9565b6101616107a2565b61014461022c36600461139f565b6107ae565b610161600081565b6101616107d7565b6101ee61024f36600461136b565b610833565b61026761026236600461136b565b6108e8565b604051610150919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0828101519082015260c0808301519082015260e0918201511515918101919091526101000190565b6101ee6102dc3660046113cb565b6109b8565b6101ee6102ef36600461139f565b610ac1565b6101ee610302366004611465565b610ae6565b61031a610315366004611554565b610c18565b6040516101509190611576565b6101ee6103353660046115c3565b610cfd565b60006001600160e01b03198216637965db0b60e01b148061036b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600154600254604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e90604401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190611605565b905090565b6001600160a01b038116600090815260056020526040812060048101546003820154839161041e91611634565b9050428181101561043457506000949350505050565b600783015460009060ff161561046d5782846006015411610456576000610466565b8284600601546104669190611647565b90506104a0565b600084600501548461047f9190611634565b905080831061049257846005015461049c565b61049c8484611647565b9150505b600084600501548286600101546104b7919061165a565b6104c19190611671565b90506000856002015482116104d75760006104e6565b60028601546104e69083611647565b600787015490915060ff168015610501575085600601548410155b1561051157979650505050505050565b979650505050505050565b60008281526020819052604090206001015461053781610d6e565b6105418383610d7b565b505050565b6001600160a01b03811633146105bb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105c58282610dff565b5050565b336000818152600560205260409020546001600160a01b0316146106005760405163502ffa3f60e11b815260040160405180910390fd5b80600003610621576040516360640efd60e11b815260040160405180910390fd5b33600090815260056020526040902060048101546003820154429161064591611634565b8110156106835780826004015483600301546106619190611634565b6040516367f2a6c360e11b8152600481019290925260248201526044016105b2565b600061068e336103f1565b9050808411156106bb5760405163271fb30560e21b815260048101859052602481018290526044016105b2565b838360020160008282546106cf9190611634565b90915550506001546002546001600160a01b03918216916323b872dd9116336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018790526064016020604051808303816000875af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190611693565b5060405184815233907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309060200160405180910390a250505050565b60006103ec6003610e64565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080806107e56003610e64565b905060005b8181101561082b5760056000610801600384610e6e565b6001600160a01b0316815260208101919091526040016000206001908101549390930192016107ea565b509092915050565b61085d7f654cf90216eecc7de4eb1e1f3b7b3cf7e630c873f6cf3ff18753f0093c958207336107ae565b15801561087257506108706000336107ae565b155b156108905760405163662136cd60e11b815260040160405180910390fd5b6001600160a01b03811660008181526005602052604080822060078101805460ff191690556006810183905590519092917f6f64e2246d8a5cd8d55ea99199b39ac605693722f899ac2405b7c54bae3eda7e91a25050565b61093b60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b0390811660009081526005602081815260409283902083516101008101855281549095168552600181015491850191909152600281015492840192909252600382015460608401526004820154608084015281015460a0830152600681015460c08301526007015460ff16151560e082015290565b6109e27f654cf90216eecc7de4eb1e1f3b7b3cf7e630c873f6cf3ff18753f0093c958207336107ae565b1580156109f757506109f56000336107ae565b155b15610a155760405163662136cd60e11b815260040160405180910390fd5b6001600160a01b038216600090815260056020526040902060038101548211610a615760038101546040516349d7e3e960e01b81526105b2918491600401918252602082015260400190565b6006810182905560078101805460ff191660011790556040516001600160a01b038416907f96a3db8ae0226bd6c5e331039c8dc9bad983d211de42680d9775dfbddb1b71a990610ab49085815260200190565b60405180910390a2505050565b600082815260208190526040902060010154610adc81610d6e565b6105418383610dff565b610b107f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39336107ae565b158015610b255750610b236000336107ae565b155b15610b435760405163ce37e7ad60e01b815260040160405180910390fd5b8051600003610b655760405163d77fbd1d60e01b815260040160405180910390fd5b805160005b8181101561054157610c10838281518110610b8757610b876116b5565b602002602001015160000151848381518110610ba557610ba56116b5565b602002602001015160200151858481518110610bc357610bc36116b5565b602002602001015160400151868581518110610be157610be16116b5565b602002602001015160600151878681518110610bff57610bff6116b5565b602002602001015160800151610e81565b600101610b6a565b60606000610c266003610e64565b9050808410610c4557505060408051600081526020810190915261036b565b80610c508486611634565b1115610c6357610c608482611647565b92505b60008367ffffffffffffffff811115610c7e57610c7e6113f5565b604051908082528060200260200182016040528015610ca7578160200160208202803683370190505b50905060005b84811015610cf457610cc26003878301610e6e565b828281518110610cd457610cd46116b5565b6001600160a01b0390921660209283029190910190910152600101610cad565b50949350505050565b610d277f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39336107ae565b158015610d3c5750610d3a6000336107ae565b155b15610d5a5760405163ce37e7ad60e01b815260040160405180910390fd5b610d678585858585610e81565b5050505050565b610d78813361106e565b50565b610d8582826107ae565b6105c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610dbb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e0982826107ae565b156105c5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061036b825490565b6000610e7a83836110c7565b9392505050565b610eab7f88df8672b6a816cafb7f0f91f61a06a8a1f7c9088af1db2285870c32fed77b39336107ae565b158015610ec05750610ebe6000336107ae565b155b15610ede5760405163ce37e7ad60e01b815260040160405180910390fd5b6001600160a01b038516610f055760405163502ffa3f60e11b815260040160405180910390fd5b83600003610f26576040516307e7e9a960e21b815260040160405180910390fd5b610f316003866110f1565b15610f5957604051620118fb60e11b81526001600160a01b03861660048201526024016105b2565b60408051610100810182526001600160a01b0387811680835260208084018981526000858701818152606087018b8152608088018b815260a089018b815260c08a0185815260e08b018681529886526005978890529a909420985189546001600160a01b03191698169790971788559251600188015551600287015590516003808701919091559351600486015551908401559251600683015591516007909101805460ff19169115159190911790556110139086611113565b506040805185815260208101859052908101839052606081018290526001600160a01b038616907f9f7f47e73fd629c582be438a08553de4dc70f4b96c2735ad7ff9ec4314096e859060800160405180910390a25050505050565b61107882826107ae565b6105c55761108581611128565b61109083602061113a565b6040516020016110a19291906116ef565b60408051601f198184030181529082905262461bcd60e51b82526105b291600401611764565b60008260000182815481106110de576110de6116b5565b9060005260206000200154905092915050565b6001600160a01b03811660009081526001830160205260408120541515610e7a565b6000610e7a836001600160a01b0384166112d6565b606061036b6001600160a01b03831660145b6060600061114983600261165a565b611154906002611634565b67ffffffffffffffff81111561116c5761116c6113f5565b6040519080825280601f01601f191660200182016040528015611196576020820181803683370190505b509050600360fc1b816000815181106111b1576111b16116b5565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111e0576111e06116b5565b60200101906001600160f81b031916908160001a905350600061120484600261165a565b61120f906001611634565b90505b6001811115611287576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611243576112436116b5565b1a60f81b828281518110611259576112596116b5565b60200101906001600160f81b031916908160001a90535060049490941c9361128081611797565b9050611212565b508315610e7a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105b2565b600081815260018301602052604081205461131d5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561036b565b50600061036b565b60006020828403121561133757600080fd5b81356001600160e01b031981168114610e7a57600080fd5b80356001600160a01b038116811461136657600080fd5b919050565b60006020828403121561137d57600080fd5b610e7a8261134f565b60006020828403121561139857600080fd5b5035919050565b600080604083850312156113b257600080fd5b823591506113c26020840161134f565b90509250929050565b600080604083850312156113de57600080fd5b6113e78361134f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561142e5761142e6113f5565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561145d5761145d6113f5565b604052919050565b6000602080838503121561147857600080fd5b823567ffffffffffffffff8082111561149057600080fd5b818501915085601f8301126114a457600080fd5b8135818111156114b6576114b66113f5565b6114c4848260051b01611434565b818152848101925060a09182028401850191888311156114e357600080fd5b938501935b828510156115485780858a0312156115005760008081fd5b61150861140b565b6115118661134f565b81528587013587820152604080870135908201526060808701359082015260808087013590820152845293840193928501926114e8565b50979650505050505050565b6000806040838503121561156757600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156115b75783516001600160a01b031683529284019291840191600101611592565b50909695505050505050565b600080600080600060a086880312156115db57600080fd5b6115e48661134f565b97602087013597506040870135966060810135965060800135945092505050565b60006020828403121561161757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561036b5761036b61161e565b8181038181111561036b5761036b61161e565b808202811582820484141761036b5761036b61161e565b60008261168e57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156116a557600080fd5b81518015158114610e7a57600080fd5b634e487b7160e01b600052603260045260246000fd5b60005b838110156116e65781810151838201526020016116ce565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516117278160178501602088016116cb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516117588160288401602088016116cb565b01602801949350505050565b60208152600082518060208401526117838160408501602087016116cb565b601f01601f19169190910160400192915050565b6000816117a6576117a661161e565b50600019019056fea2646970667358221220162ff7d608e4172880bd6be667e7becdc97ac24fc44523fa5d29b6b99d029da164736f6c63430008130033",
  "devdoc": {
    "errors": {
      "AmountExceedsWithdrawableAllowance(uint256,uint256)": [
        {
          "params": {
            "amount": "Amount of tokens to be claimed.",
            "claimable": "Amount of tokens that can be claimed."
          }
        }
      ],
      "CallerIsNotATerminationAdmin()": [
        {
          "details": "Reverts if the caller is not a termination admin."
        }
      ],
      "CallerIsNotATimelockCreator()": [
        {
          "details": "Reverts if the caller is not the timelock creator."
        }
      ],
      "ReceiverAlreadyHasATimelock(address)": [
        {
          "params": {
            "receiver": "Address of the receiver."
          }
        }
      ],
      "TerminationTimeMustBeAfterLockStart(uint256,uint256)": [
        {
          "params": {
            "lockFrom": "Timestamp from which tokens will be locked.",
            "terminationFrom": "Timestamp from which tokens will be terminated."
          }
        }
      ],
      "TokenTransferFailed(address,address,uint256)": [
        {
          "params": {
            "amount": "Amount of tokens transferred.",
            "receiver": "Address of the receiver.",
            "tokenPool": "Address of the token pool."
          }
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TimelockCreated(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "cliffDuration": "Cliff time in seconds (6 months default).",
          "receiver": "Address of the receiver.",
          "totalAmount": "Total amount of tokens to be vested.",
          "vestingDuration": "Vesting duration in seconds (18/24 months)."
        }
      },
      "TimelockDeterminated(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "TimelockTerminated(address,uint256)": {
        "params": {
          "receiver": "Address of the receiver.",
          "terminationFrom": "Timestamp from which tokens will be terminated."
        }
      },
      "TokensClaimed(address,uint256)": {
        "params": {
          "amount": "Amount of tokens claimed.",
          "receiver": "Address of the claimer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addTimelock(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "cliffDuration": "Cliff time in seconds (6 months default).",
          "receiver": "Address of the receiver.",
          "timelockFrom": "Timestamp from which the timelock will start.",
          "totalAmount": "Total amount of tokens to be vested.",
          "vestingDuration": "Vesting duration in seconds (18/24 months)."
        }
      },
      "addTimelockBatch((address,uint256,uint256,uint256,uint256)[])": {
        "params": {
          "receivers": "Array of receivers."
        }
      },
      "claim(uint256)": {
        "params": {
          "amount": "Amount of tokens to be claimed."
        }
      },
      "determinate(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "getClaimableBalance(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTimelock(address)": {
        "params": {
          "receiver": "Address of the receiver."
        }
      },
      "getTimelockReceivers(uint256,uint256)": {
        "params": {
          "limit": "Limit of receivers to be returned.",
          "offset": "Offset from which receivers will be returned."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "terminate(address,uint256)": {
        "params": {
          "receiver": "Address of the receiver.",
          "terminationFrom": "Timestamp from which tokens will be terminated."
        }
      }
    },
    "stateVariables": {
      "_token": {
        "details": "Link to IQT repository: https://github.com/iqlabsorg/iqt-eth"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AmountExceedsWithdrawableAllowance(uint256,uint256)": [
        {
          "notice": "Reverts if amount exceeds vesting allowance."
        }
      ],
      "CliffPeriodNotEnded(uint256,uint256)": [
        {
          "notice": "Reverts if cliff period has not ended."
        }
      ],
      "EmptyReceiversArray()": [
        {
          "notice": "Reverts if empty receivers array is passed."
        }
      ],
      "InvalidReceiverAddress()": [
        {
          "notice": "Reverts if invalid receiver address is passed."
        }
      ],
      "InvalidTimelockAmount()": [
        {
          "notice": "Reverts if invalid timelock amount is passed."
        }
      ],
      "ReceiverAlreadyHasATimelock(address)": [
        {
          "notice": "Reverts if receiver already has a timelock."
        }
      ],
      "TerminationTimeMustBeAfterLockStart(uint256,uint256)": [
        {
          "notice": "Reverts if termination time is before lock start."
        }
      ],
      "TokenTransferFailed(address,address,uint256)": [
        {
          "notice": "Reverts if token transfer failed."
        }
      ],
      "ZeroAllocation()": [
        {
          "notice": "Reverts if vesting period has not started."
        }
      ],
      "ZeroClaimAmount()": [
        {
          "notice": "Reverts if zero claim amount is passed."
        }
      ]
    },
    "events": {
      "TimelockCreated(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emits when timelock is created."
      },
      "TimelockDeterminated(address)": {
        "notice": "Emits when timelock is determinated."
      },
      "TimelockTerminated(address,uint256)": {
        "notice": "Emits when timelock is terminated."
      },
      "TokensClaimed(address,uint256)": {
        "notice": "Emits when tokens are claimed."
      }
    },
    "kind": "user",
    "methods": {
      "addTimelock(address,uint256,uint256,uint256,uint256)": {
        "notice": "Creates timelock for token receiver."
      },
      "addTimelockBatch((address,uint256,uint256,uint256,uint256)[])": {
        "notice": "Creates timelock for token receivers in a batch mode."
      },
      "claim(uint256)": {
        "notice": "Claims tokens for the receiver."
      },
      "constructor": {
        "notice": "Reverts if the timelock does not exist."
      },
      "determinate(address)": {
        "notice": "Determinates timelock for the receiver."
      },
      "getClaimableBalance(address)": {
        "notice": "Returns the amount of tokens that are currently allowed for claim."
      },
      "getCurrentAllowance()": {
        "notice": "Returns the amount of tokens that are currently allowed for transfer."
      },
      "getTimelock(address)": {
        "notice": "Returns the timelock data."
      },
      "getTimelockReceivers(uint256,uint256)": {
        "notice": "Returns the array of timelock receivers."
      },
      "getTimelockReceiversAmount()": {
        "notice": "Returns the amount of timelock receivers."
      },
      "getTokenAddress()": {
        "notice": "Returns the address of token."
      },
      "getTotalTokensLocked()": {
        "notice": "Returns the amount of tokens that are currently locked."
      },
      "getVestingPoolAddress()": {
        "notice": "Returns the address of vesting pool."
      },
      "terminate(address,uint256)": {
        "notice": "Terminates timelock for the receiver."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4825,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)466"
      },
      {
        "astId": 4828,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_vestingPool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4832,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_allReceivers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)2050_storage"
      },
      {
        "astId": 4838,
        "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
        "label": "_timelocks",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Timelock)5639_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)466": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Timelock)5639_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBatchTimelock.Timelock)",
        "numberOfBytes": "32",
        "value": "t_struct(Timelock)5639_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2050_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2049,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1735_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1735_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1730,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1734,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Timelock)5639_storage": {
        "encoding": "inplace",
        "label": "struct IBatchTimelock.Timelock",
        "members": [
          {
            "astId": 5624,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5626,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5628,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "releasedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5630,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "timelockFrom",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5632,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "cliffDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5634,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5636,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "terminationFrom",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5638,
            "contract": "contracts/timelock/BatchTimelock.sol:BatchTimelock",
            "label": "isTerminated",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}