{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "4493d00a3cd8cff04fa2aab511547525d0d30a20adc96f6c982bdbc683c5a5b6",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/library/Constants.sol:Constants": {
        "src": "contracts/library/Constants.sol:4",
        "version": {
          "withMetadata": "6ed71286f95093c771b060d24e14aed6d5577cd6f9bcbb7fee152ef51ed712ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/IQTMock.sol:IQTMock": {
        "src": "contracts/mocks/IQTMock.sol:6",
        "version": {
          "withMetadata": "2bf72c9e54e65c2b8f49bd130cc467fa4b3ad8b58d1eb9cbf7e1bb85013eb044",
          "withoutMetadata": "1bc8883732045a97521055ed195245dc22be4d9a7688f5ac9726c72c7a8c8ba0",
          "linkedWithoutMetadata": "1bc8883732045a97521055ed195245dc22be4d9a7688f5ac9726c72c7a8c8ba0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IQTMock",
            "src": "contracts/mocks/IQTMock.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/IStakingManagement.sol:IStakingManagement": {
        "src": "contracts/staking-management/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/StakingManagement.sol:StakingManagement": {
        "src": "contracts/staking-management/StakingManagement.sol:11",
        "version": {
          "withMetadata": "acbb545dd4ff08a168ac842a31e1603160987b91983a88db100cfe24450b6afe",
          "withoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a",
          "linkedWithoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking-management/IStakingManagement.sol:IStakingManagement"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingManagement",
            "src": "contracts/staking-management/StakingManagement.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)777",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:17"
            },
            {
              "label": "_stakingPlans",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingPlan)1563_storage)",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:22"
            },
            {
              "label": "_stakingPlanIds",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(UintSet)1351_storage",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:27"
            },
            {
              "label": "_withdrawalEnabled",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:32"
            },
            {
              "label": "_minimumStake",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:37"
            },
            {
              "label": "_maximumStake",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)777": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingPlan)1563_storage)": {
              "label": "mapping(uint256 => struct IStakingManagement.StakingPlan)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)879_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakingPlan)1563_storage": {
              "label": "struct IStakingManagement.StakingPlan",
              "members": [
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "apy",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)1351_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)879_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/IStaking.sol:IStaking": {
        "src": "contracts/staking/IStaking.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStake(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "isStakeExists(uint256)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/Staking.sol:Staking": {
        "src": "contracts/staking/Staking.sol:12",
        "version": {
          "withMetadata": "3374c1b604032f73c3374a1869eaf66b07c5baf399d60c901a2564644d6f62b2",
          "withoutMetadata": "38059e67269752a48e1f33ef62ac4c552871b0a90d7bfcc6e5be41ce4133601b",
          "linkedWithoutMetadata": "38059e67269752a48e1f33ef62ac4c552871b0a90d7bfcc6e5be41ce4133601b"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking/IStaking.sol:IStaking"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "calculateTotalEarnings(address)",
          "isStakeExists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts/staking/Staking.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_stakingToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)777",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:18"
            },
            {
              "label": "_stakingManagement",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStakingManagement)1677",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:23"
            },
            {
              "label": "_userStakes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)1351_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:28"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Stake)2210_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:33"
            },
            {
              "label": "_allStakeIds",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(UintSet)1351_storage",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)777": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStakingManagement)1677": {
              "label": "contract IStakingManagement",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UintSet)1351_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Stake)2210_storage)": {
              "label": "mapping(uint256 => struct IStaking.Stake)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)879_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Stake)2210_storage": {
              "label": "struct IStaking.Stake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stakingPlanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "earningsInTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "earningsPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "earlyWithdrawal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "withdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(UintSet)1351_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)879_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/BatchTimelock.sol:BatchTimelock": {
        "src": "contracts/timelock/BatchTimelock.sol:12",
        "version": {
          "withMetadata": "017f8adcaeeab163d7a977d7ebde5052fe0571fbdeef5e8b5e8bd7125711c02c",
          "withoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2",
          "linkedWithoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2"
        },
        "inherit": [
          "contracts/timelock/IVestingPool.sol:IVestingPool",
          "contracts/timelock/IBatchTimelock.sol:IBatchTimelock",
          "contracts/timelock/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchTimelock.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/timelock/BatchTimelock.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)777",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)1194_storage",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)3652_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)777": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)3652_storage)": {
              "label": "mapping(address => struct IBatchTimelock.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)1194_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)879_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)879_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)3652_storage": {
              "label": "struct IBatchTimelock.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/IBatchTimelock.sol:IBatchTimelock": {
        "src": "contracts/timelock/IBatchTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchTimelock.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/ITerminateable.sol:ITerminateable": {
        "src": "contracts/timelock/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/IVestingPool.sol:IVestingPool": {
        "src": "contracts/timelock/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "4493d00a3cd8cff04fa2aab511547525d0d30a20adc96f6c982bdbc683c5a5b6",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/IQTMock.sol:IQTMock": {
        "src": "contracts/mocks/IQTMock.sol:6",
        "version": {
          "withMetadata": "2bf72c9e54e65c2b8f49bd130cc467fa4b3ad8b58d1eb9cbf7e1bb85013eb044",
          "withoutMetadata": "1bc8883732045a97521055ed195245dc22be4d9a7688f5ac9726c72c7a8c8ba0",
          "linkedWithoutMetadata": "1bc8883732045a97521055ed195245dc22be4d9a7688f5ac9726c72c7a8c8ba0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IQTMock",
            "src": "contracts/mocks/IQTMock.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/BatchTimelock.sol:BatchTimelock": {
        "src": "contracts/timelock/BatchTimelock.sol:12",
        "version": {
          "withMetadata": "017f8adcaeeab163d7a977d7ebde5052fe0571fbdeef5e8b5e8bd7125711c02c",
          "withoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2",
          "linkedWithoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2"
        },
        "inherit": [
          "contracts/timelock/IVestingPool.sol:IVestingPool",
          "contracts/timelock/IBatchTimelock.sol:IBatchTimelock",
          "contracts/timelock/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchTimelock.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/timelock/BatchTimelock.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)777",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)1194_storage",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)2238_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/timelock/BatchTimelock.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)777": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)2238_storage)": {
              "label": "mapping(address => struct IBatchTimelock.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)1194_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)879_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)879_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)2238_storage": {
              "label": "struct IBatchTimelock.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/IBatchTimelock.sol:IBatchTimelock": {
        "src": "contracts/timelock/IBatchTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchTimelock.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/ITerminateable.sol:ITerminateable": {
        "src": "contracts/timelock/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/timelock/IVestingPool.sol:IVestingPool": {
        "src": "contracts/timelock/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/library/Constants.sol:Constants": {
        "src": "contracts/library/Constants.sol:4",
        "version": {
          "withMetadata": "6ed71286f95093c771b060d24e14aed6d5577cd6f9bcbb7fee152ef51ed712ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/IStakingManagement.sol:IStakingManagement": {
        "src": "contracts/staking-management/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/StakingManagement.sol:StakingManagement": {
        "src": "contracts/staking-management/StakingManagement.sol:11",
        "version": {
          "withMetadata": "acbb545dd4ff08a168ac842a31e1603160987b91983a88db100cfe24450b6afe",
          "withoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a",
          "linkedWithoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking-management/IStakingManagement.sol:IStakingManagement"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingManagement",
            "src": "contracts/staking-management/StakingManagement.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:17"
            },
            {
              "label": "_stakingPlans",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingPlan)881_storage)",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:22"
            },
            {
              "label": "_stakingPlanIds",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(UintSet)695_storage",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:27"
            },
            {
              "label": "_withdrawalEnabled",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:32"
            },
            {
              "label": "_minimumStake",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:37"
            },
            {
              "label": "_maximumStake",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingPlan)881_storage)": {
              "label": "mapping(uint256 => struct IStakingManagement.StakingPlan)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakingPlan)881_storage": {
              "label": "struct IStakingManagement.StakingPlan",
              "members": [
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "apy",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)695_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/IStaking.sol:IStaking": {
        "src": "contracts/staking/IStaking.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStake(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "isStakeExists(uint256)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/Staking.sol:Staking": {
        "src": "contracts/staking/Staking.sol:12",
        "version": {
          "withMetadata": "3374c1b604032f73c3374a1869eaf66b07c5baf399d60c901a2564644d6f62b2",
          "withoutMetadata": "38059e67269752a48e1f33ef62ac4c552871b0a90d7bfcc6e5be41ce4133601b",
          "linkedWithoutMetadata": "38059e67269752a48e1f33ef62ac4c552871b0a90d7bfcc6e5be41ce4133601b"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking/IStaking.sol:IStaking"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "calculateTotalEarnings(address)",
          "isStakeExists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts/staking/Staking.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_stakingToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)190",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:18"
            },
            {
              "label": "_stakingManagement",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStakingManagement)995",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:23"
            },
            {
              "label": "_userStakes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)695_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:28"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Stake)1528_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:33"
            },
            {
              "label": "_allStakeIds",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(UintSet)695_storage",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStakingManagement)995": {
              "label": "contract IStakingManagement",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UintSet)695_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Stake)1528_storage)": {
              "label": "mapping(uint256 => struct IStaking.Stake)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Stake)1528_storage": {
              "label": "struct IStaking.Stake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stakingPlanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "earningsInTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "earningsPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "earlyWithdrawal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "withdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(UintSet)695_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/vesting/BatchVesting.sol:BatchTimelock": {
        "src": "contracts/vesting/BatchVesting.sol:12",
        "version": {
          "withMetadata": "b5b620d50bda0c7d860d486025da3a25ca523fb8aa841467eebb72e9b9bbaee1",
          "withoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2",
          "linkedWithoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2"
        },
        "inherit": [
          "contracts/vesting/IVestingPool.sol:IVestingPool",
          "contracts/vesting/IBatchVesting.sol:IBatchVesting",
          "contracts/vesting/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/vesting/BatchVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "BatchTimelock",
              "src": "contracts/vesting/BatchVesting.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/vesting/BatchVesting.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)538_storage",
              "contract": "BatchTimelock",
              "src": "contracts/vesting/BatchVesting.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)2970_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/vesting/BatchVesting.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)2970_storage)": {
              "label": "mapping(address => struct IBatchVesting.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)538_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)2970_storage": {
              "label": "struct IBatchVesting.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/vesting/IBatchVesting.sol:IBatchVesting": {
        "src": "contracts/vesting/IBatchVesting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/vesting/ITerminateable.sol:ITerminateable": {
        "src": "contracts/vesting/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/vesting/IVestingPool.sol:IVestingPool": {
        "src": "contracts/vesting/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/BatchVesting.sol:BatchTimelock": {
        "src": "contracts/batch-vesting/BatchVesting.sol:12",
        "version": {
          "withMetadata": "dd9b776e198446f87c314a27154afdb7a5966492ce0652f757f9f8abd341015b",
          "withoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2",
          "linkedWithoutMetadata": "dfdb39243f8826cddd995063cf1f0735de87dc098f9d763fbfd0b4512bbac8f2"
        },
        "inherit": [
          "contracts/batch-vesting/IVestingPool.sol:IVestingPool",
          "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting",
          "contracts/batch-vesting/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/batch-vesting/BatchVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)538_storage",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)1556_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)1556_storage)": {
              "label": "mapping(address => struct IBatchVesting.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)538_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)1556_storage": {
              "label": "struct IBatchVesting.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting": {
        "src": "contracts/batch-vesting/IBatchVesting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/ITerminateable.sol:ITerminateable": {
        "src": "contracts/batch-vesting/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IVestingPool.sol:IVestingPool": {
        "src": "contracts/batch-vesting/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/BatchVesting.sol:BatchTimelock": {
        "src": "contracts/batch-vesting/BatchVesting.sol:12",
        "version": {
          "withMetadata": "73c3fc06fd5d51db843b236a50a61a9e700c6ff237ad358c3dd979e713f0f0c3",
          "withoutMetadata": "9a1082ba98683ba5d6a50e5d514e12f7604e4a57e45cbc85e358cf2c2f20bc8e",
          "linkedWithoutMetadata": "9a1082ba98683ba5d6a50e5d514e12f7604e4a57e45cbc85e358cf2c2f20bc8e"
        },
        "inherit": [
          "contracts/batch-vesting/IVestingPool.sol:IVestingPool",
          "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting",
          "contracts/batch-vesting/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/batch-vesting/BatchVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)538_storage",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)1548_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)1548_storage)": {
              "label": "mapping(address => struct IBatchVesting.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)538_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)1548_storage": {
              "label": "struct IBatchVesting.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting": {
        "src": "contracts/batch-vesting/IBatchVesting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/ITerminateable.sol:ITerminateable": {
        "src": "contracts/batch-vesting/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IVestingPool.sol:IVestingPool": {
        "src": "contracts/batch-vesting/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/BatchVesting.sol:BatchTimelock": {
        "src": "contracts/batch-vesting/BatchVesting.sol:12",
        "version": {
          "withMetadata": "bcb5a91504be5474de998cc644a71d07824ad1ef527885a675adb17c55dc96eb",
          "withoutMetadata": "5a6cd92eface56a27dae7c61869163a9cdc8fbb6387a25ef54b7ecca09be07f4",
          "linkedWithoutMetadata": "5a6cd92eface56a27dae7c61869163a9cdc8fbb6387a25ef54b7ecca09be07f4"
        },
        "inherit": [
          "contracts/batch-vesting/IVestingPool.sol:IVestingPool",
          "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting",
          "contracts/batch-vesting/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/batch-vesting/BatchVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)538_storage",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)1529_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)1529_storage)": {
              "label": "mapping(address => struct IBatchVesting.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)538_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)1529_storage": {
              "label": "struct IBatchVesting.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting": {
        "src": "contracts/batch-vesting/IBatchVesting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/ITerminateable.sol:ITerminateable": {
        "src": "contracts/batch-vesting/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IVestingPool.sol:IVestingPool": {
        "src": "contracts/batch-vesting/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/BatchVesting.sol:BatchTimelock": {
        "src": "contracts/batch-vesting/BatchVesting.sol:12",
        "version": {
          "withMetadata": "c1a73b121240ee8b81e0e31ae183956bb639978f059742e3d875ea40f103c478",
          "withoutMetadata": "541c1b31c76c18a68004bb5d1c27be3685f4e6bdfd9accb557ec7b3906ee5c9d",
          "linkedWithoutMetadata": "541c1b31c76c18a68004bb5d1c27be3685f4e6bdfd9accb557ec7b3906ee5c9d"
        },
        "inherit": [
          "contracts/batch-vesting/IVestingPool.sol:IVestingPool",
          "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting",
          "contracts/batch-vesting/ITerminateable.sol:ITerminateable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getClaimableBalance(address)",
          "getTimelock(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()",
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/batch-vesting/BatchVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:19"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:24"
            },
            {
              "label": "_allReceivers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(AddressSet)538_storage",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:29"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Timelock)1536_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)1536_storage)": {
              "label": "mapping(address => struct IBatchVesting.Timelock)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)538_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Timelock)1536_storage": {
              "label": "struct IBatchVesting.Timelock",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting": {
        "src": "contracts/batch-vesting/IBatchVesting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTimelockBatch(struct IBatchVesting.Receiver[])",
          "addTimelock(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getTimelock(address)",
          "getClaimableBalance(address)",
          "getTimelockReceivers(uint256,uint256)",
          "getTimelockReceiversAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/ITerminateable.sol:ITerminateable": {
        "src": "contracts/batch-vesting/ITerminateable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "terminate(address,uint256)",
          "determinate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IVestingPool.sol:IVestingPool": {
        "src": "contracts/batch-vesting/IVestingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentAllowance()",
          "getTotalTokensLocked()",
          "getVestingPoolAddress()",
          "getTokenAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/BatchVesting.sol:BatchTimelock": {
        "src": "contracts/batch-vesting/BatchVesting.sol:7",
        "version": {
          "withMetadata": "003b28f3de7a81d03e812011dc5bc19e0f0764aedb3ffdced6730312bf55de62",
          "withoutMetadata": "cc03559cb2e8239795a3d1a36ec83b1186f0fef72e59e1237f4f076a92981805",
          "linkedWithoutMetadata": "cc03559cb2e8239795a3d1a36ec83b1186f0fef72e59e1237f4f076a92981805"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "terminate(address,uint256)",
          "determinate(address)",
          "addReceiverBatch(struct BatchTimelock.Receiver[])",
          "addReceiver(address,uint256,uint256,uint256)",
          "claim(uint256)",
          "getWithdrawableBalance(address)",
          "getCurrentAllowance()",
          "getTotalTokensAllocated()",
          "getTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BatchTimelock",
            "src": "contracts/batch-vesting/BatchVesting.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:32"
            },
            {
              "label": "_vestingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:33"
            },
            {
              "label": "_timelocks",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Timelock)242_storage)",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:35"
            },
            {
              "label": "receiverAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BatchTimelock",
              "src": "contracts/batch-vesting/BatchVesting.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Timelock)242_storage)": {
              "label": "mapping(address => struct BatchTimelock.Timelock)",
              "numberOfBytes": "32"
            },
            "t_struct(Timelock)242_storage": {
              "label": "struct BatchTimelock.Timelock",
              "members": [
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lockFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "terminationFrom",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isTerminated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/batch-vesting/IBatchVesting.sol:IBatchVesting": {
        "src": "contracts/batch-vesting/IBatchVesting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addBeneficiary(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/library/Constants.sol:Constants": {
        "src": "contracts/library/Constants.sol:4",
        "version": {
          "withMetadata": "6ed71286f95093c771b060d24e14aed6d5577cd6f9bcbb7fee152ef51ed712ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/IStakingManagement.sol:IStakingManagement": {
        "src": "contracts/staking-management/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/IStaking.sol:IStaking": {
        "src": "contracts/staking/IStaking.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStake(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "isStakeExists(uint256)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/Staking.sol:Staking": {
        "src": "contracts/staking/Staking.sol:12",
        "version": {
          "withMetadata": "3374c1b604032f73c3374a1869eaf66b07c5baf399d60c901a2564644d6f62b2",
          "withoutMetadata": "38059e67269752a48e1f33ef62ac4c552871b0a90d7bfcc6e5be41ce4133601b",
          "linkedWithoutMetadata": "38059e67269752a48e1f33ef62ac4c552871b0a90d7bfcc6e5be41ce4133601b"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking/IStaking.sol:IStaking"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "calculateTotalEarnings(address)",
          "isStakeExists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts/staking/Staking.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_stakingToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)77",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:18"
            },
            {
              "label": "_stakingManagement",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStakingManagement)882",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:23"
            },
            {
              "label": "_userStakes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)582_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:28"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Stake)944_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:33"
            },
            {
              "label": "_allStakeIds",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(UintSet)582_storage",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)77": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStakingManagement)882": {
              "label": "contract IStakingManagement",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UintSet)582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Stake)944_storage)": {
              "label": "mapping(uint256 => struct IStaking.Stake)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)110_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Stake)944_storage": {
              "label": "struct IStaking.Stake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stakingPlanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "earningsInTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "earningsPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "earlyWithdrawal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "withdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(UintSet)582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)110_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/library/Constants.sol:Constants": {
        "src": "contracts/library/Constants.sol:4",
        "version": {
          "withMetadata": "6ed71286f95093c771b060d24e14aed6d5577cd6f9bcbb7fee152ef51ed712ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/IStakingManagement.sol:IStakingManagement": {
        "src": "contracts/staking-management/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/StakingManagement.sol:StakingManagement": {
        "src": "contracts/staking-management/StakingManagement.sol:11",
        "version": {
          "withMetadata": "acbb545dd4ff08a168ac842a31e1603160987b91983a88db100cfe24450b6afe",
          "withoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a",
          "linkedWithoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking-management/IStakingManagement.sol:IStakingManagement"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingManagement",
            "src": "contracts/staking-management/StakingManagement.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:17"
            },
            {
              "label": "_stakingPlans",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingPlan)881_storage)",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:22"
            },
            {
              "label": "_stakingPlanIds",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(UintSet)695_storage",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:27"
            },
            {
              "label": "_withdrawalEnabled",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:32"
            },
            {
              "label": "_minimumStake",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:37"
            },
            {
              "label": "_maximumStake",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingPlan)881_storage)": {
              "label": "mapping(uint256 => struct IStakingManagement.StakingPlan)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakingPlan)881_storage": {
              "label": "struct IStakingManagement.StakingPlan",
              "members": [
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "apy",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)695_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/IStaking.sol:IStaking": {
        "src": "contracts/staking/IStaking.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStake(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "isStakeExists(uint256)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/Staking.sol:Staking": {
        "src": "contracts/staking/Staking.sol:12",
        "version": {
          "withMetadata": "3b9498aa0ad0bf4354d90e582ba45fd188b5e529e73e6322747216050dd61637",
          "withoutMetadata": "e292fab298976683127f1d8879eae65429f5230450797ae39bf1509c393e7f90",
          "linkedWithoutMetadata": "e292fab298976683127f1d8879eae65429f5230450797ae39bf1509c393e7f90"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking/IStaking.sol:IStaking"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "calculateTotalEarnings(address)",
          "isStakeExists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts/staking/Staking.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_stakingToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)190",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:18"
            },
            {
              "label": "_stakingManagement",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStakingManagement)995",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:23"
            },
            {
              "label": "_userStakes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)695_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:28"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Stake)1528_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:33"
            },
            {
              "label": "_allStakeIds",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(UintSet)695_storage",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStakingManagement)995": {
              "label": "contract IStakingManagement",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UintSet)695_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Stake)1528_storage)": {
              "label": "mapping(uint256 => struct IStaking.Stake)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Stake)1528_storage": {
              "label": "struct IStaking.Stake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stakingPlanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "earningsInTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "earningsPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "earlyWithdrawal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "withdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(UintSet)695_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/library/Constants.sol:Constants": {
        "src": "contracts/library/Constants.sol:4",
        "version": {
          "withMetadata": "82ebd56649c270b790aab2f2ca59f6aec7e39dbd27db0f9cbb7fdd14c0eba490",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/IStakingManagement.sol:IStakingManagement": {
        "src": "contracts/staking-management/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/IStaking.sol:IStaking": {
        "src": "contracts/staking/IStaking.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStake(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "isStakeExists(uint256)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/Staking.sol:Staking": {
        "src": "contracts/staking/Staking.sol:12",
        "version": {
          "withMetadata": "8f94172574918fd9e6e5d9f228126e59603a1db938f343f5f916cb3bb8aec84e",
          "withoutMetadata": "e1f02b012aaa314181fde0fe7b070d6b455f037ff6d7586a2e5516bf4461b33e",
          "linkedWithoutMetadata": "e1f02b012aaa314181fde0fe7b070d6b455f037ff6d7586a2e5516bf4461b33e"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking/IStaking.sol:IStaking"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "calculateTotalEarnings(address)",
          "isStakeExists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts/staking/Staking.sol:70"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_stakingToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)77",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:18"
            },
            {
              "label": "_stakingManagement",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStakingManagement)882",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:23"
            },
            {
              "label": "_userStakes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)582_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:28"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Stake)938_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:33"
            },
            {
              "label": "_allStakeIds",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(UintSet)582_storage",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)77": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStakingManagement)882": {
              "label": "contract IStakingManagement",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UintSet)582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Stake)938_storage)": {
              "label": "mapping(uint256 => struct IStaking.Stake)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)110_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Stake)938_storage": {
              "label": "struct IStaking.Stake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stakingPlanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "earningsInTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "earningsPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "withdrawn",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(UintSet)582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)110_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "8abbf8fcad8e30a7c9a196b93354358b978bf29496643a7332b221fcb3dca3de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/library/Constants.sol:Constants": {
        "src": "contracts/library/Constants.sol:4",
        "version": {
          "withMetadata": "82ebd56649c270b790aab2f2ca59f6aec7e39dbd27db0f9cbb7fdd14c0eba490",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/IStakingManagement.sol:IStakingManagement": {
        "src": "contracts/staking-management/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking-management/StakingManagement.sol:StakingManagement": {
        "src": "contracts/staking-management/StakingManagement.sol:11",
        "version": {
          "withMetadata": "ffdd0ec290713fd1a8a19c6d430d83fa6b6692e2922320f6379b76ff8c3d48ea",
          "withoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a",
          "linkedWithoutMetadata": "1be2a8bdbc300f54c938d31d036cabf92875434d736e7a992cf143dadcecf50a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking-management/IStakingManagement.sol:IStakingManagement"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "addStakingPlan(uint256,uint16)",
          "updateStakingPlan(uint256,uint256,uint16)",
          "removeStakingPlan(uint256)",
          "enableWithdraw()",
          "disableWithdraw()",
          "setStakingLimits(uint256,uint256)",
          "setMininumStake(uint256)",
          "setMaximumStake(uint256)",
          "checkStakingPlanExists(uint256)",
          "getStakingToken()",
          "getStakingPlan(uint256)",
          "getStakingPlans(uint256,uint256)",
          "isWithdrawEnabled()",
          "getStakingLimits()",
          "getMinimumStake()",
          "getMaximumStake()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingManagement",
            "src": "contracts/staking-management/StakingManagement.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)190",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:17"
            },
            {
              "label": "_stakingPlans",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingPlan)881_storage)",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:22"
            },
            {
              "label": "_stakingPlanIds",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(UintSet)695_storage",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:27"
            },
            {
              "label": "_withdrawalEnabled",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:32"
            },
            {
              "label": "_minimumStake",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:37"
            },
            {
              "label": "_maximumStake",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingManagement",
              "src": "contracts/staking-management/StakingManagement.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingPlan)881_storage)": {
              "label": "mapping(uint256 => struct IStakingManagement.StakingPlan)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakingPlan)881_storage": {
              "label": "struct IStakingManagement.StakingPlan",
              "members": [
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "apy",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)695_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/IStaking.sol:IStaking": {
        "src": "contracts/staking/IStaking.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStake(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "isStakeExists(uint256)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/staking/Staking.sol:Staking": {
        "src": "contracts/staking/Staking.sol:12",
        "version": {
          "withMetadata": "bf1a109e5001cf98aa0e3307a48509d29bd0e5041d75abf8ce7eae2b0e0ff0e0",
          "withoutMetadata": "e1f02b012aaa314181fde0fe7b070d6b455f037ff6d7586a2e5516bf4461b33e",
          "linkedWithoutMetadata": "e1f02b012aaa314181fde0fe7b070d6b455f037ff6d7586a2e5516bf4461b33e"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/staking/IStaking.sol:IStaking"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/library/Constants.sol:Constants"
        ],
        "methods": [
          "(address)",
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(uint256)",
          "calculateStakeEarnings(uint256)",
          "getStakes(address,uint256,uint256)",
          "getStakeIds(address)",
          "calculateTotalEarnings(address)",
          "isStakeExists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts/staking/Staking.sol:59"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_stakingToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)190",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:18"
            },
            {
              "label": "_stakingManagement",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStakingManagement)995",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:23"
            },
            {
              "label": "_userStakes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)695_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:28"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Stake)1522_storage)",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:33"
            },
            {
              "label": "_allStakeIds",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(UintSet)695_storage",
              "contract": "Staking",
              "src": "contracts/staking/Staking.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)190": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStakingManagement)995": {
              "label": "contract IStakingManagement",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UintSet)695_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Stake)1522_storage)": {
              "label": "mapping(uint256 => struct IStaking.Stake)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)223_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Stake)1522_storage": {
              "label": "struct IStaking.Stake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stakingPlanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "earningsInTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "earningsPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "withdrawn",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(UintSet)695_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)223_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/IStakerData.sol:IStakerData": {
        "src": "contracts/IStakerData.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256)",
          "withdraw(uint256)",
          "getStake(address,uint256)",
          "calculateStakeEarnings(address,uint256)",
          "getAllStakes(address)",
          "calculateTotalEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/IStakingManagement.sol:IStakingControl": {
        "src": "contracts/IStakingManagement.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addStakingPlan(uint256,uint256)",
          "updateStakingPlan(uint256,uint256,uint256)",
          "getStakingPlan(uint256)",
          "getStakingPlans()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "3d47aa69e75180036338a4964e79ac6c57f81da440fedb7a70da639c22d3cbe9",
          "withoutMetadata": "4feaa558c949fa6f714e530bc74b2d62da568e343c77ce553b321f02d3af2e6a",
          "linkedWithoutMetadata": "4feaa558c949fa6f714e530bc74b2d62da568e343c77ce553b321f02d3af2e6a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlockTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lock",
              "src": "contracts/Lock.sol:8"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "Lock",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}